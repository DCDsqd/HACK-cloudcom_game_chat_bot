import os
from telegram import ReplyKeyboardMarkup, ReplyKeyboardRemove, Update, Poll, KeyboardButtonPollType
from telegram.ext import (
    CommandHandler,
    ContextTypes,
    ConversationHandler,
    MessageHandler,
    filters,
)
from telegram.constants import ParseMode

from common_func import is_available
from database import *
from admin import parse_new_event_info_string

CLASS_CHOOSING, SUBMIT_CLASS, WHERE_CHOOSING, CHRONOS_CHOOSING, SUBCLASS_CHOOSING, TASKS = range(6)

TOTAL_VOTER_COUNT = 3

POLL_INPUT = range(1)

""" –¢–†–ï–ë–£–ï–¢ –î–û–†–ê–ë–û–¢–ö–ò!!!!!
async def add_event_poll(update: Update, context: ContextTypes.DEFAULT_TYPE):
    msg = "–í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ\n\n" \
          "–û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ, —á—Ç–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–æ–≤–æ–º —Å–æ–±—ã—Ç–∏–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–æ–¥–∏—Ç—å –°–¢–†–û–ì–û –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º –Ω–∏–∂–µ —Ñ–æ—Ä–º–∞—Ç–µ.\n" \
          "–í—Å–µ –ø–æ–ª—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ä–∞–∑–¥–µ–ª–µ–Ω—ã –∑–Ω–∞–∫–æ–º –ø–µ—Ä–µ–Ω–æ—Å–∞ —Å—Ç—Ä–æ–∫–∏ (—á–µ—Ä–µ–∑ Shift+Enter).\n\n" \
          "–§–æ—Ä–º–∞—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–æ–±—ã—Ç–∏–∏: \n" \
          "–ù–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è (–Ω–µ –±–æ–ª–µ–µ 50 —Å–∏–º–≤–æ–ª–æ–≤)\n" \
          "–û–ø–∏—Å–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è (–Ω–µ –±–æ–ª–µ–µ 500 —Å–∏–º–≤–æ–ª–æ–≤)\n" \
          "–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —Å–æ–±—ã—Ç–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ yyyy-MM-dd hh:mm:ss\n" \
          "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–æ–±—ã—Ç–∏—è (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ, –≤ –º–∏–Ω—É—Ç–∞—Ö)\n" \
          "–ù–∞–≥—Ä–∞–¥–∞ –æ–ø—ã—Ç–æ–º –∑–∞ —Å–æ–±—ã—Ç–∏–µ (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ >=0)\n\n\n" \
          "–ü—Ä–∏–º–µ—Ä –≤–≤–æ–¥–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–ª—è –Ω–æ–≤–æ–≥–æ —Å–æ–±—ã—Ç–∏—è: \n" \
          "–ú–æ–µ –Ω–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ\n" \
          "–≠—Ç–æ —Å–æ–±—ã—Ç–∏–µ –±—É–¥–µ—Ç –ª—É—á—à–∏–º –≤ –∏—Å—Ç–æ—Ä–∏–∏!\n" \
          "2027-12-12 23:59:59\n" \
          "60\n" \
          "365\n\n\n" \
          "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–æ–≤–æ–º —Å–æ–±—ã—Ç–∏–∏ –≤ –æ—Ç–≤–µ—Ç–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏."
    await update.message.reply_text(msg)
    return POLL_INPUT



async def event_poll(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    await context.bot.delete_message(chat_id=update.effective_chat.id, message_id=update.message.message_id)
    await context.bot.delete_message(chat_id=update.effective_chat.id, message_id=update.message.message_id-1)
    is_ok, msg = parse_new_event_info_string(text)
    if is_ok:
        await context.bot.send_message(chat_id=update.effective_chat.id, text=text)
        questions = ["–î–∞", "–ù–µ—Ç"]
        message = await context.bot.send_poll(
            update.effective_chat.id,
            "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç–µ –ª–∏ –í—ã –ø—Ä–æ–≤–µ–¥–µ–Ω–∏–µ –¥–∞–Ω–Ω–æ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è?",
            questions,
            is_anonymous=False,
            allows_multiple_answers=False,
        )
        payload = {
            message.poll.id: {
                "questions": questions,
                "message_id": message.message_id,
                "chat_id": update.effective_chat.id,
                "answers": 0,
            }
        }
        context.bot_data.update(payload)
        return ConversationHandler.END
    else:
        cancel_keyboard = [["–û—Ç–º–µ–Ω–∞"]]
        markup = ReplyKeyboardMarkup(cancel_keyboard, one_time_keyboard=True)
        response = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è!\n–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {msg}\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑."
        await context.bot.send_message(chat_id=update.effective_chat.id, text=response, reply_markup=markup)
        return POLL_INPUT


async def receive_poll_answer(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    # Summarize a users poll vote
    answer = update.poll_answer
    answered_poll = context.bot_data[answer.poll_id]
    try:
        questions = answered_poll["questions"]
    # this means this poll answer update is from an old poll, we can't do our answering then
    except KeyError:
        return
    selected_options = answer.option_ids
    answer_string = ""
    for question_id in selected_options:
        if question_id != selected_options[-1]:
            answer_string += questions[question_id] + " and "
        else:
            answer_string += questions[question_id]
    await context.bot.send_message(
        answered_poll["chat_id"],
        f"{update.effective_user.mention_html()} –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª –∑–∞ '{answer_string}'!",
        parse_mode=ParseMode.HTML,
    )
    answered_poll["answers"] += 1
    # Close poll after three participants voted
    if answered_poll["answers"] == TOTAL_VOTER_COUNT:
        await context.bot.stop_poll(answered_poll["chat_id"], answered_poll["message_id"])
    print(answered_poll)


async def poll_cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message = "–°–æ–∑–¥–∞–Ω–∏–µ –æ–ø—Ä–æ—Å–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ."
    await context.bot.send_message(chat_id=update.effective_chat.id, text=message)
    return ConversationHandler.END

event_poll_handler = ConversationHandler(
    entry_points=[CommandHandler("poll", add_event_poll)],
    states={
        POLL_INPUT: [
            MessageHandler(
                filters.TEXT & ~(filters.COMMAND | filters.Regex("^–û—Ç–º–µ–Ω–∞$|^–ù–∞–∑–∞–¥$")), event_poll),
        ]
    },
    fallbacks=[MessageHandler(filters.Regex("^–û—Ç–º–µ–Ω–∞$"), poll_cancel)],
)
"""


async def game(update: Update, context: ContextTypes.DEFAULT_TYPE):
    con = create_connection('../db/database.db')
    user_id = update.message.from_user.id
    request = f"SELECT game_class FROM users WHERE id={user_id}"
    user_class = execute_read_query(con, request)
    con.close()
    if user_class[0][0] is None:
        await context.bot.send_photo(chat_id=update.effective_chat.id,
                                     photo=open(os.path.abspath('../res/locations/gate.png'), 'rb'),
                                     caption="–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –í–µ–ª–∏–∫—É—é –ò–º–ø–µ—Ä–∏—é. –ï–µ –≤—ã–±—Ä–∞–ª–∏ –≤—ã, –∏–ª–∏ –µ–µ –≤—ã–±—Ä–∞–ª–∏ –∑–∞ –≤–∞—Å" \
                                             "‚Äî —ç—Ç–æ –ª—É—á—à–µ–µ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–æ –∏–∑ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è.\n\n –°–µ–π—á–∞—Å –í–∞–º –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å "
                                             "–ª–∏—Ü–µ–Ω–∑–∏—é –Ω–∞ —Ä–æ–ª—å –∫–ª–∞—Å—Å–∞.")
        classes_description = "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–ª–∞—Å—Å—ã:\n\n" \
                              "üõ° –†—ã—Ü–∞—Ä—å ‚Äî –≤—ã—Å–æ–∫–∞—è –∑–∞—â–∏—Ç–∞ –∏ —Å—Ä–µ–¥–Ω—è—è –∞—Ç–∞–∫–∞. –ù–æ—Å–∏—Ç –Ω–µ–±–æ–ª—å—à–æ–π —â–∏—Ç –∏ –º–µ—á.\n" \
                              "üßô –ú–∞–≥ ‚Äî –≤—ã—Å–æ–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞, –∞—Ç–∞–∫–∞ –Ω–∏–∂–µ —Å—Ä–µ–¥–Ω–µ–≥–æ, –Ω–∏–∑–∫–∞—è –∑–∞—â–∏—Ç–∞. –ù–æ—Å–∏—Ç –ø–æ—Å–æ—Ö.\n" \
                              "üèπ –õ—É—á–Ω–∏–∫ ‚Äî –≤—ã—Å–æ–∫–∏–π –∫–æ–Ω—Ç—Ä–æ–ª—å, –∞—Ç–∞–∫–∞ –Ω–∏–∂–µ —Å—Ä–µ–¥–Ω–µ–≥–æ, –Ω–∏–∑–∫–∞—è –∑–∞—â–∏—Ç–∞. –ù–æ—Å–∏—Ç –ª—É–∫ (–≤–∞—É).\n" \
                              "üó° –û—Ö–æ—Ç–Ω–∏–∫ ‚Äî –≤—ã—Å–æ–∫–∞—è –∞—Ç–∞–∫–∞, –∑–∞—â–∏—Ç–∞ –Ω–∏–∂–µ —Å—Ä–µ–¥–Ω–µ–≥–æ, –Ω–æ—Å–∏—Ç –∫–ª–∏–Ω–æ–∫.\n\n" \
                              "–ß—Ç–æ –≤—ã–±–µ—Ä–µ—Ç–µ?"
        class_keyboard = [["–†—ã—Ü–∞—Ä—å", "–ú–∞–≥", "–õ—É—á–Ω–∏–∫", "–û—Ö–æ—Ç–Ω–∏–∫"], ["–û—Ç–º–µ–Ω–∞"]]
        markup = ReplyKeyboardMarkup(class_keyboard, one_time_keyboard=True)
        await context.bot.send_message(chat_id=update.effective_chat.id, text=classes_description, reply_markup=markup)
        return CLASS_CHOOSING
    else:
        where_keyboard = [["–î–æ–º –ø–æ—Ä—É—á–µ–Ω–∏–π", "–•—Ä–∞–º –•—Ä–æ–Ω–æ—Å–∞", "–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è"],
                          ["–î–æ–º –≥–∏–ª—å–¥–∏–π", '–ö—É–∑–Ω–∏—Ü–∞', '–†—ã–Ω–æ–∫'],
                          ['–ê—Ä–µ–Ω–∞', '–í–µ–ª–∏–∫–∞—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∞', '–ó–∞–ª –ª–µ–≥–∏–æ–Ω–µ—Ä–æ–≤'], ["–û—Ç–º–µ–Ω–∞"]]
        markup = ReplyKeyboardMarkup(where_keyboard, one_time_keyboard=True)
        message = '–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º! –ö—É–¥–∞ –æ—Ç–ø—Ä–∞–≤–∏–º—Å—è?'
        await context.bot.send_message(chat_id=update.effective_chat.id, text=message, reply_markup=markup)
        return WHERE_CHOOSING


async def class_choosing(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    user_id = update.message.from_user.id
    context.user_data["choice"] = text
    inserter('game_class', text, user_id)
    message = f'–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–∏–ª–∏ –ª–∏—Ü–µ–Ω–∑–∏—é –Ω–∞ —Ä–æ–ª—å "{text}".\n\n' \
              "–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –≤–∞–º –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã –≤—Å–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ —Å–ª—É–∂–∏—Ç–µ–ª—è –∏–º–ø–µ—Ä–∏–∏, " \
              "–æ–¥–Ω–∞–∫–æ –Ω–µ —Ä–∞—Å—Å—Ç—Ä–∞–∏–≤–∞–π—Ç–µ—Å—å, –≤–∞–º –±—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã –Ω–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø–æ –º–µ—Ä–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª–µ–¥—É—é—â–∏—Ö —Ä–∞–Ω–≥–æ–≤. " \
              "–í–∞–º –ø—Ä–µ–¥—Å—Ç–æ–∏—Ç –ø—Ä–æ–π—Ç–∏ –º–Ω–æ–≥–æ –∏—Å–ø—ã—Ç–∞–Ω–∏–π –∏ –±–∏—Ç–≤, –Ω–æ –º—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ –≤—ã —Å–º–æ–∂–µ—Ç–µ –ø—Ä–µ–æ–¥–æ–ª–µ—Ç—å –≤—Å–µ —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏" \
              " –∏ —Å—Ç–∞—Ç—å –æ–¥–Ω–∏–º –∏–∑ –ª—É—á—à–∏—Ö –≤ –Ω–∞—à–µ–π –∏–º–ø–µ—Ä–∏–∏. –ñ–µ–ª–∞–µ–º –í–∞–º —É–¥–∞—á–∏!"
    await context.bot.send_message(chat_id=update.effective_chat.id, text=message, reply_markup=ReplyKeyboardRemove())
    where_keyboard = [["–î–æ–º –ø–æ—Ä—É—á–µ–Ω–∏–π", "–•—Ä–∞–º –•—Ä–æ–Ω–æ—Å–∞", "–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è"],
                      ["–î–æ–º –≥–∏–ª—å–¥–∏–π", '–ö—É–∑–Ω–∏—Ü–∞', '–†—ã–Ω–æ–∫'],
                      ['–ê—Ä–µ–Ω–∞', '–í–µ–ª–∏–∫–∞—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∞', '–ó–∞–ª –ª–µ–≥–∏–æ–Ω–µ—Ä–æ–≤'], ["–û—Ç–º–µ–Ω–∞"]]
    markup = ReplyKeyboardMarkup(where_keyboard, one_time_keyboard=True)
    message = '–ö—É–¥–∞ –æ—Ç–ø—Ä–∞–≤–∏–º—Å—è?'
    await context.bot.send_message(chat_id=update.effective_chat.id, text=message, reply_markup=markup)
    return WHERE_CHOOSING


async def assignments(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message = '–í—ã –ø–æ–¥—Ö–æ–¥–∏—Ç–µ –∫ –Ω–µ–±–æ–ª—å—à–æ–º—É –∑–¥–∞–Ω–∏—é —Å –≤—ã–≤–µ—Å–∫–æ–π "–î–æ–º –ø–æ—Ä—É—á–µ–Ω–∏–π". ' \
              '–ü—Ä–∏ –≤—Ö–æ–¥–µ –í—ã –∑–∞–º–µ—á–∞–µ—Ç–µ, —á—Ç–æ –Ω–∞ —Å—Ç–µ–Ω–∞—Ö –≤–∏—Å—è—Ç –¥–æ—Å–∫–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–π —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –∑–∞–¥–∞–Ω–∏—è–º–∏.\n' \
              '–ú–æ–∂–µ—Ç –∏ –ø–æ–ª—É—á–∏—Ç—Å—è –Ω–∞–π—Ç–∏, —á—Ç–æ-—Ç–æ, —á—Ç–æ –í–∞–º –ø–æ –¥—É—à–µ...\n\n' \
              '–í –æ–¥–∏–Ω–æ—á–∫—É –∏–ª–∏ —Å –¥—Ä—É–∑—å—è–º–∏?'
    count_keyboard = [["–í –æ–¥–∏–Ω–æ—á–∫—É", "–° –¥—Ä—É–∑—å—è–º–∏"], ["–ù–∞–∑–∞–¥"]]
    markup = ReplyKeyboardMarkup(count_keyboard, one_time_keyboard=True)
    await context.bot.send_message(chat_id=update.effective_chat.id, text=message,
                                   reply_markup=markup)  # –ó–¥–µ—Å—å –±—É–¥—É—Ç –∑–∞–¥–∞–Ω–∏—è
    return TASKS


async def alone_tasks(update: Update, context: ContextTypes.DEFAULT_TYPE):
    pass  # –°—é–¥–∞ –¥–æ–±–∞–≤–∏–º –æ–¥–∏–Ω–æ—á–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è


async def multiplayer_tasks(update: Update, context: ContextTypes.DEFAULT_TYPE):
    pass  # –°—é–¥–∞ –¥–æ–±–∞–≤–∏–º –º—É–ª—å—Ç–∏–ø–ª–µ–µ—Ä –∑–∞–¥–∞–Ω–∏—è


async def chronos(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_available(update.message.from_user.id, 500):
        message = '–í—ã –ø–æ–¥—Ö–æ–¥–∏—Ç–µ –∫ –æ–≥—Ä–æ–º–Ω–æ–º—É —Ö—Ä–∞–º—É, –Ω–æ –∫–∞–∫–∞—è-—Ç–æ –Ω–µ–≤–µ–¥–æ–º–∞—è —Å–∏–ª–∞ –Ω–µ –¥–∞—ë—Ç –í–∞–º –ø—Ä–æ–π—Ç–∏ –≤–Ω—É—Ç—Ä—å.\n–í–æ–∑–º–æ–∂–Ω–æ, ' \
                  '–í–∞–º –ø–æ–∫–∞ —á—Ç–æ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –æ–ø—ã—Ç–∞.'
        await context.bot.send_message(chat_id=update.effective_chat.id, text=message)
    else:
        message = '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –•—Ä–∞–º –•—Ä–æ–Ω–æ—Å–∞. –ó–¥–µ—Å—å –≤—ã —Å–º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—ã–µ –Ω–∞–≤—ã–∫–∏ –¥–ª—è —Å–≤–æ–µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞, ' \
                  '–∞ —Ç–∞–∫–∂–µ, –ø–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–≥–æ —Ä–∞–Ω–≥–∞, –∏–∑–º–µ–Ω–∏—Ç—å –ø–æ–¥–∫–ª–∞—Å—Å.'
        if not is_available(update.message.from_user.id, 2000):  # –ï—Å–ª–∏ –æ–ø—ã—Ç –±–æ–ª—å—à–µ 2000, –¥–∞—ë–º –¥–æ—Å—Ç—É–ø –∫ —Å–º–µ–Ω–µ –ø–æ–¥–∫–ª–∞—Å—Å–∞
            chronos_keyboard = [["–£–ª—É—á—à–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞"], ["–ù–∞–∑–∞–¥"]]
        else:
            chronos_keyboard = [["–£–ª—É—á—à–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞", "–ò–∑–º–µ–Ω–∏—Ç—å –ø–æ–¥–∫–ª–∞—Å—Å"], ["–ù–∞–∑–∞–¥"]]
        markup = ReplyKeyboardMarkup(chronos_keyboard, one_time_keyboard=True)
        await context.bot.send_message(chat_id=update.effective_chat.id, text=message, reply_markup=markup)
        return CHRONOS_CHOOSING


async def upgrade_champ(update: Update, context: ContextTypes.DEFAULT_TYPE):
    pass  # –ó–¥–µ—Å—å –±—É–¥–µ—Ç —É–ª—É—á—à–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞


async def change_subclass(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if is_available(update.message.from_user.id, 1000):
        con = create_connection('../db/database.db')
        user_id = update.message.from_user.id
        request = f"SELECT game_class FROM users WHERE id={user_id}"
        class_data = execute_read_query(con, request)
        con.close()
        if class_data[0][0] == '–†—ã—Ü–∞—Ä—å':
            subclass_keyboard = [["–õ–∞—Ç–Ω–∏–∫", "–ü–∞–ª–∞–¥–∏–Ω"], ["–ù–∞–∑–∞–¥"]]
            message = "–û–ø–∏—Å–∞–Ω–∏–µ –ø–æ–¥–∫–ª–∞—Å—Å–æ–≤:\n\n" \
                      "‚öúÔ∏è –õ–∞—Ç–Ω–∏–∫ - —É–ø–æ—Ä –≤ –∑–∞—â–∏—Ç—É, –Ω–æ—Å–∏—Ç –º–∞—Å—Å–∏–≤–Ω—ã–π —â–∏—Ç –∏ –º–µ—á\n" \
                      "‚öîÔ∏è –ü–∞–ª–∞–¥–∏–Ω - —É–ø–æ—Ä –≤ –∞—Ç–∞–∫—É, –Ω–æ—Å–∏—Ç —Ç—è–∂–µ–ª—ã–µ –¥–æ—Å–ø–µ—Ö–∏ –∏ –º–æ–ª–æ—Ç"

        elif class_data[0][0] == '–ú–∞–≥':
            subclass_keyboard = [["–ß–µ—Ä–Ω–æ–∫–Ω–∏–∂–Ω–∏–∫", "–≠–ª–µ–º–µ–Ω—Ç–∞–ª—å", "–ê–Ω–≥–µ–ª"], ["–ù–∞–∑–∞–¥"]]
            message = "–û–ø–∏—Å–∞–Ω–∏–µ –ø–æ–¥–∫–ª–∞—Å—Å–æ–≤:\n\n" \
                      "üìì –ß–µ—Ä–Ω–æ–∫–Ω–∏–∂–Ω–∏–∫ - —É–ø–æ—Ä –≤ –∞—Ç–∞–∫—É, –Ω–æ—Å–∏—Ç –∫–Ω–∏–≥—É\n" \
                      "üî• –≠–ª–µ–º–µ–Ω—Ç–∞–ª—å - —É–ø–æ—Ä –≤ –∫–æ–Ω—Ç—Ä–æ–ª—å, –Ω–æ—Å–∏—Ç –ø–æ—Å–æ—Ö\n" \
                      "üí´ –ê–Ω–≥–µ–ª - —É–ø–æ—Ä –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É, –Ω–æ—Å–∏—Ç –ø–µ—Ä—á–∞—Ç–∫–∏"
        elif class_data[0][0] == '–õ—É—á–Ω–∏–∫':
            subclass_keyboard = [["–ê—Ä–±–∞–ª–µ—Ç—á–∏–∫", "–®–∞–º–∞–Ω", "–ò–Ω–∂–µ–Ω–µ—Ä"], ["–ù–∞–∑–∞–¥"]]
            message = "–û–ø–∏—Å–∞–Ω–∏–µ –ø–æ–¥–∫–ª–∞—Å—Å–æ–≤:\n\n" \
                      "‚Ü£ –ê—Ä–±–∞–ª–µ—Ç—á–∏–∫ - —É–ø–æ—Ä –≤ –∞—Ç–∞–∫—É, –Ω–æ—Å–∏—Ç –∞–≤—Ç–æ–º–∞—Ç, –Ω–∞–µ–±–∞–ª, –∞—Ä–±–∞–ª–µ—Ç\n" \
                      "üèπ –®–∞–º–∞–Ω - —É–ø–æ—Ä –≤ –∫–æ–Ω—Ç—Ä–æ–ª—å, –Ω–æ—Å–∏—Ç –ª—É–∫ –∏ –∫–æ–ª—á–∞–Ω\n" \
                      "üí• –ò–Ω–∂–µ–Ω–µ—Ä - —É–ø–æ—Ä –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É, –Ω–æ—Å–∏—Ç"  # –°—é–¥–∞ –¥–æ–±–∞–≤–∏—Ç—å —á—Ç–æ –Ω–æ—Å–∏—Ç
        elif class_data[0][0] == '–û—Ö–æ—Ç–Ω–∏–∫':
            subclass_keyboard = [["–£–±–∏–π—Ü–∞", "–®–∏–Ω–æ–±–∏"], ["–ù–∞–∑–∞–¥"]]
            message = "–û–ø–∏—Å–∞–Ω–∏–µ –ø–æ–¥–∫–ª–∞—Å—Å–æ–≤:\n\n" \
                      "‚öî –£–±–∏–π—Ü–∞ - —É–ø–æ—Ä –≤ –∞—Ç–∞–∫—É, –Ω–æ—Å–∏—Ç –∫–∏–Ω–∂–∞–ª—ã\n" \
                      "üó° –®–∏–Ω–æ–±–∏ - —É–ø–æ—Ä –≤ –∞—Ç–∞–∫—É –∏ –∫–æ–Ω—Ç—Ä–æ–ª—å, –Ω–æ—Å–∏—Ç –∫–ª–∏–Ω–æ–∫"
        else:
            return logging.error(f"SUBCLASSES DO NOT EXIT FOR CLASS {class_data[0][0]}")
        markup = ReplyKeyboardMarkup(subclass_keyboard, one_time_keyboard=True)
        await context.bot.send_message(chat_id=update.effective_chat.id, text=message, reply_markup=markup)
        return SUBCLASS_CHOOSING
    else:
        message = '–£ –≤–∞—Å –ø–æ–∫–∞ —á—Ç–æ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–º–µ–Ω–µ –ø–æ–¥–∫–ª–∞—Å—Å–∞!'
        await context.bot.send_message(chat_id=update.effective_chat.id, text=message)


async def subclass_choosing(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    user_id = update.message.from_user.id
    context.user_data["choice"] = text
    inserter('game_subclass', text, user_id)
    message = f'–í—ã —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–∏–ª–∏ –ø–æ–¥–∫–ª–∞—Å—Å –Ω–∞ "{text}!"'
    await context.bot.send_message(chat_id=update.effective_chat.id, text=message)


async def lab(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_available(update.message.from_user.id, 500):
        message = '–í—ã –ø—Ä–∏—Ö–æ–¥–∏—Ç–µ –∫ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–∏, –Ω–æ –¥–≤–µ—Ä—å –æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –∑–∞–∫—Ä—ã—Ç–æ–π.\n–í–æ–∑–º–æ–∂–Ω–æ, –í–∞–º –ø–æ–∫–∞ —á—Ç–æ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –æ–ø—ã—Ç–∞.'
        await context.bot.send_message(chat_id=update.effective_chat.id, text=message)
    else:
        pass  # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –∫—Ä–∞—Ñ—Ç–∏—Ç—å —Ä–∞—Å—Ö–æ–¥–Ω–∏–∫–∏


async def guild_house(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_available(update.message.from_user.id, 1000):
        message = '–í—ã –ø—Ä–∏—Ö–æ–¥–∏—Ç–µ –∫ –¥–æ–º—É –≥–∏–ª—å–¥–∏–π. –ü–æ –∫—Ä–∞–π–Ω–µ–π –º–µ—Ä–µ —Ç–∞–∫ —Å–∫–∞–∑–∞–ª —Å—Ç—Ä–∞–∂–Ω–∏–∫...\n–û–Ω –Ω–µ –ø—Ä–æ–ø—É—Å–∫–∞–µ—Ç –í–∞—Å –ø–æ–¥ ' \
                  '–ø—Ä–µ–¥–ª–æ–≥–æ–º, —á—Ç–æ –í—ã –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –æ–ø—ã—Ç–Ω—ã.'
        await context.bot.send_message(chat_id=update.effective_chat.id, text=message)
    else:
        pass  # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –∑–∞–ø—Ä–∞—à–∏–≤–∞—Ç—å —Ä–µ—Å—É—Ä—Å—ã


async def forge(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_available(update.message.from_user.id, 4000):
        message = '–í—ã –ø–æ–¥—Ö–æ–¥–∏—Ç–µ –∫ –∫—É–∑–Ω–∏—Ü–µ, –Ω–æ –º–∞—Å—Ç–µ—Ä-–∫—É–∑–Ω–µ—Ü –∫–∞—Ç–µ–≥–æ—Ä–∏—á–µ—Å–∫–∏ –æ—Ç–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏–Ω–∏–º–∞—Ç—å –í–∞—à –∑–∞–∫–∞–∑. \n' \
                  '–û–Ω –æ–±—ä—è—Å–Ω—è–µ—Ç, —á—Ç–æ –µ–≥–æ —Ä–∞–±–æ—Ç–∞ —Ç—Ä–µ–±—É–µ—Ç –±–æ–ª—å—à–æ–≥–æ –æ–ø—ã—Ç–∞ –∏ –º–∞—Å—Ç–µ—Ä—Å—Ç–≤–∞, –∏ –æ–Ω –Ω–µ —Ö–æ—á–µ—Ç —Ä–∏—Å–∫–æ–≤–∞—Ç—å' \
                  ' –∏—Å–ø–æ—Ä—Ç–∏—Ç—å –∏–∑–¥–µ–ª–∏–µ.'
        await context.bot.send_message(chat_id=update.effective_chat.id, text=message)
    else:
        pass  # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –∫—Ä–∞—Ñ—Ç–∏—Ç—å –±—Ä–æ–Ω—é –∏ –æ—Ä—É–∂–∏–µ


async def market(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_available(update.message.from_user.id, 4000):
        message = '–í—ã –ø—Ä–∏—Ö–æ–¥–∏—Ç–µ –Ω–∞ —Ä—ã–Ω–æ–∫, –Ω–æ –ø—Ä–æ–¥–∞–≤—Ü—ã –Ω–µ –ø—Ä–æ—è–≤–ª—è—é—Ç –∫ –í–∞–º –∏–Ω—Ç–µ—Ä–µ—Å–∞.\n' \
                  '–í–æ–∑–º–æ–∂–Ω–æ, –í–∞—à –æ–ø—ã—Ç –≤ –ø–æ–∫—É–ø–∫–µ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ —Ä—ã–Ω–∫–µ –µ—â–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–µ–Ω, –∏ –í—ã –Ω–µ –∑–Ω–∞–µ—Ç–µ, ' \
                  '–∫–∞–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Ç–æ—Ä–≥–æ–≤–∞—Ç—å—Å—è –∏–ª–∏ –≤—ã–±–∏—Ä–∞—Ç—å –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã.\n' \
                  '–í–∞–º —Å—Ç–æ–∏—Ç –Ω–∞–±—Ä–∞—Ç—å—Å—è –æ–ø—ã—Ç–∞ –∏ –∑–Ω–∞–Ω–∏–π, —á—Ç–æ–±—ã —Å—Ç–∞—Ç—å –±–æ–ª–µ–µ —É–≤–µ—Ä–µ–Ω–Ω—ã–º –∏ –∫–æ–º–ø–µ—Ç–µ–Ω—Ç–Ω—ã–º –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–º.'
        await context.bot.send_message(chat_id=update.effective_chat.id, text=message)
    else:
        pass  # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –ø–æ–∫—É–ø–∞—Ç—å —Ç–æ–≤–∞—Ä—ã


async def arena(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_available(update.message.from_user.id, 8000):
        message = '–í—ã –ø—Ä–∏—Ö–æ–¥–∏—Ç–µ –Ω–∞ –∞—Ä–µ–Ω—É –¥–ª—è —Å—Ä–∞–∂–µ–Ω–∏–π, –Ω–æ –æ—Ö—Ä–∞–Ω–Ω–∏–∫ –Ω–µ –ø—É—Å–∫–∞–µ—Ç –í–∞—Å –≤–Ω—É—Ç—Ä—å.\n–û–Ω –æ–±—ä—è—Å–Ω—è–µ—Ç, —á—Ç–æ –Ω–∞ –∞—Ä–µ–Ω–µ ' \
                  '—Å—Ä–∞–∂–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –æ–ø—ã—Ç–Ω—ã–µ –∏ –∑–Ω–∞—é—â–∏–µ —Å–≤–æ–µ –¥–µ–ª–æ –±–æ–π—Ü—ã, –∏ –æ–Ω –Ω–µ —Ö–æ—á–µ—Ç –¥–æ–ø—É—Å—Ç–∏—Ç—å —Ä–∏—Å–∫–∞ –¥–ª—è –í–∞—à–µ–π –∂–∏–∑–Ω–∏.\n' \
                  '–í–æ–∑–º–æ–∂–Ω–æ, –í–∞–º –µ—â–µ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –æ–ø—ã—Ç–∞ –∏ –Ω–∞–≤—ã–∫–æ–≤ –≤ –±–æ—é, –∏ –í–∞–º —Å—Ç–æ–∏—Ç –ø–æ—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å—Å—è –∏ –Ω–∞–±—Ä–∞—Ç—å—Å—è –æ–ø—ã—Ç–∞, ' \
                  '—á—Ç–æ–±—ã –¥–æ–∫–∞–∑–∞—Ç—å —Å–≤–æ—é –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ —Å—Ä–∞–∂–µ–Ω–∏—è–º –Ω–∞ –∞—Ä–µ–Ω–µ.'
        await context.bot.send_message(chat_id=update.effective_chat.id, text=message)
    else:
        pass  # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –±—É–¥–µ—Ç —É—Å—Ç—Ä–æ–∏—Ç—å —Å–æ—Å—Ç—è–∑–∞–Ω–∏–µ


async def library(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_available(update.message.from_user.id, 8000):
        message = '–í—ã –ø–æ–¥—Ö–æ–¥–∏—Ç–µ –∫ –≤–µ–ª–∏–∫–æ–π –±–∏–±–ª–∏–æ—Ç–µ–∫–µ, –Ω–æ –±–∏–±–ª–∏–æ—Ç–µ–∫–∞—Ä—å –æ—Ç–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –≤—ã–¥–∞—Ç—å –í–∞–º –∫–Ω–∏–≥—É, –Ω–∞ –∫–æ—Ç–æ—Ä—É—é –í—ã ' \
                  '—Ö–æ—Ç–µ–ª–∏ –±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å.\n–û–Ω –æ–±—ä—è—Å–Ω—è–µ—Ç, —á—Ç–æ –¥–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –æ–±—Ä–∞—â–∞—Ç—å—Å—è —Å —Ç–∞–∫–∏–º–∏ —Ü–µ–Ω–Ω–æ—Å—Ç—è–º–∏, –∫–∞–∫ –∫–Ω–∏–≥–∏, ' \
                  '–Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ–±–ª–∞–¥–∞—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–º —É—Ä–æ–≤–Ω–µ–º –∑–Ω–∞–Ω–∏–π –∏ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è.\n–í–æ–∑–º–æ–∂–Ω–æ, –í–∞–º –µ—â–µ –Ω—É–∂–Ω–æ –∏–∑—É—á–∏—Ç—å ' \
                  '–Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –æ—Å–Ω–æ–≤—ã –Ω–∞—É–∫–∏, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–º –∫–Ω–∏–≥–∞–º –≤ –±–∏–±–ª–∏–æ—Ç–µ–∫–µ.'
        await context.bot.send_message(chat_id=update.effective_chat.id, text=message)
    else:
        pass  # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –∑–∞ –¥–µ–Ω—å–≥–∏ –ø–æ–∫—É–ø–∞—Ç—å –∞–±–∏–ª–∫–∏


async def hall_of_legionnaires(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_available(update.message.from_user.id, 16000):
        message = '–í—ã –ø—Ä–∏—Ö–æ–¥–∏—Ç–µ –≤ –∑–∞–ª –ª–µ–≥–∏–æ–Ω–µ—Ä–æ–≤, –Ω–æ —Å—Ç—Ä–∞–∂–Ω–∏–∫ –Ω–µ –ø–æ–∑–≤–æ–ª—è–µ—Ç –í–∞–º –≤–æ–π—Ç–∏ –≤–Ω—É—Ç—Ä—å.\n–û–Ω –æ–±—ä—è—Å–Ω—è–µ—Ç, —á—Ç–æ –≤ –∑–∞–ª–µ ' \
                  '—Å–æ–±–∏—Ä–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –Ω–∞—Å—Ç–æ—è—â–∏–µ –≤–æ–∏–Ω—ã, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ—à–ª–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ –∏—Å–ø—ã—Ç–∞–Ω–∏—è –∏ –¥–æ–∫–∞–∑–∞–ª–∏ —Å–≤–æ—é –±–æ–µ–≤—É—é ' \
                  '–≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å.\n–í–æ–∑–º–æ–∂–Ω–æ, –í–∞–º –µ—â–µ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –æ–ø—ã—Ç–∞ –∏ –Ω–∞–≤—ã–∫–æ–≤ –≤ –±–æ—é, —á—Ç–æ–±—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –ª–µ–≥–∏–æ–Ω–µ—Ä–∞–º.'
        await context.bot.send_message(chat_id=update.effective_chat.id, text=message)
    else:
        pass  # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –±—Ä–∞—Ç—å –∑–∞–¥–∞–Ω–∏—è –ª–µ–≥–∏–æ–Ω–∞ (–í–æ–∑–º–æ–∂–Ω–æ —Å—Ç–æ–∏—Ç –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ —ç—Ç–æ –≤ –¥–æ–º –ø–æ—Ä—É—á–µ–Ω–∏–π)


async def game_cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message = " –î–æ –≤—Å—Ç—Ä–µ—á–∏! –ú—ã –±—É–¥–µ–º –∂–¥–∞—Ç—å –í–∞—Å –≤ –ò–º–ø–µ—Ä–∏–∏!"
    await context.bot.send_message(chat_id=update.effective_chat.id, text=message, reply_markup=ReplyKeyboardRemove())
    return ConversationHandler.END


game_handler = ConversationHandler(
    entry_points=[CommandHandler("game", game)],
    states={
        CLASS_CHOOSING: [
            MessageHandler(filters.Regex("^–†—ã—Ü–∞—Ä—å$|^–ú–∞–≥$|^–õ—É—á–Ω–∏–∫$|^–û—Ö–æ—Ç–Ω–∏–∫$"), class_choosing),
        ],
        WHERE_CHOOSING: [
            MessageHandler(filters.Regex("^–î–æ–º –ø–æ—Ä—É—á–µ–Ω–∏–π$"), assignments),
            MessageHandler(filters.Regex("^–•—Ä–∞–º –•—Ä–æ–Ω–æ—Å–∞$"), chronos),
            MessageHandler(filters.Regex("^–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è$"), lab),
            MessageHandler(filters.Regex("^–î–æ–º –≥–∏–ª—å–¥–∏–π$"), guild_house),
            MessageHandler(filters.Regex("^–ö—É–∑–Ω–∏—Ü–∞$"), forge),
            MessageHandler(filters.Regex("^–†—ã–Ω–æ–∫$"), market),
            MessageHandler(filters.Regex("^–ê—Ä–µ–Ω–∞$"), arena),
            MessageHandler(filters.Regex("^–í–µ–ª–∏–∫–∞—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∞$"), library),
            MessageHandler(filters.Regex("^–ó–∞–ª –ª–µ–≥–∏–æ–Ω–µ—Ä–æ–≤$"), hall_of_legionnaires),
        ],
        CHRONOS_CHOOSING: [
            MessageHandler(filters.Regex("^–£–ª—É—á—à–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞$"), upgrade_champ),
            MessageHandler(filters.Regex("^–ò–∑–º–µ–Ω–∏—Ç—å –ø–æ–¥–∫–ª–∞—Å—Å$"), change_subclass),
            MessageHandler(filters.Regex("^–ù–∞–∑–∞–¥$"), game),
        ],
        SUBCLASS_CHOOSING: [
            MessageHandler(filters.Regex(
                "^–õ–∞—Ç–Ω–∏–∫$|^–ü–∞–ª–∞–¥–∏–Ω$|^–ß–µ—Ä–Ω–æ–∫–Ω–∏–∂–Ω–∏–∫$|^–≠–ª–µ–º–µ–Ω—Ç–∞–ª—å$|^–ê–Ω–≥–µ–ª$|^–ê—Ä–±–∞–ª–µ—Ç—á–∏–∫$|^–®–∞–º–∞–Ω$|^–ò–Ω–∂–µ–Ω–µ—Ä$|^–£–±–∏–π—Ü–∞$"
                "|^–®–∏–Ω–æ–±–∏$"),
                subclass_choosing),
            MessageHandler(filters.Regex("^–ù–∞–∑–∞–¥$"), chronos),
        ],
        TASKS: [
            MessageHandler(filters.Regex("^–í –æ–¥–∏–Ω–æ—á–∫—É$"), alone_tasks),
            MessageHandler(filters.Regex("^–° –¥—Ä—É–∑—å—è–º–∏$"), multiplayer_tasks),
            MessageHandler(filters.Regex("^–ù–∞–∑–∞–¥$"), game),
        ],
    },
    fallbacks=[MessageHandler(filters.Regex("^–û—Ç–º–µ–Ω–∞$"), game_cancel)],
)
