import logging
import os
import re
import random
from telegram import ReplyKeyboardMarkup, ReplyKeyboardRemove, Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    CommandHandler,
    ContextTypes,
    ConversationHandler,
    MessageHandler,
    filters,
)
import telegram.error

from common_func import check_if_user_exp_is_enough, merge_photos, attacks_markup, solo_danges_attacks_markup
from menu_chain import main_menu
from duels import *  # this also imports database
from equipment import switch_equip_type_to_russian
from danges import *

CLASS_CHOOSING, SUBMIT_CLASS, WHERE_CHOOSING, CHRONOS_CHOOSING, SUBCLASS_CHOOSING, TASKS, ALONE_TASK_CHOOSING, \
    MULTIPLAYER_TASK_CHOOSING, ARENA_CHOOSING, GET_USER_TO_DUEL_ID, GET_CHAT_ID, GET_USER_FOR_SPECIAL_MULTIPLAYER_ID, \
    GET_USER_FOR_RANDOM_MULTIPLAYER_ID, INVENTORY_CHOOSING, LAB_CHOOSING, GETTING_ITEM_ID, GUILD_CHOOSING, \
    GUILD_REQUEST, GUILD_ID_GETTING, FORGE_CHOOSING, ITEM_INPUT, WEAPON_ID_FOR_ENCHANT, ARMOR_ID_FOR_ENCHANT, \
    WEAPON_CHOOSING, ARMOR_CHOOSING, SOLO_DANGE_ATTACKS = range(26)

TOTAL_VOTER_COUNT = 3

POLL_INPUT = range(1)


async def game_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user_id = update.message.from_user.id
    user_class = db.get_player_class_by_id(user_id)
    if user_class is None or user_class == '':
        await context.bot.send_photo(chat_id=update.effective_chat.id,
                                     photo=open(os.path.abspath('../res/locations/gate.png'), 'rb'),
                                     caption="–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –í–µ–ª–∏–∫—É—é –ò–º–ø–µ—Ä–∏—é. –ï–µ –≤—ã–±—Ä–∞–ª–∏ –≤—ã, –∏–ª–∏ –µ–µ –≤—ã–±—Ä–∞–ª–∏ –∑–∞ –≤–∞—Å" \
                                             "‚Äî —ç—Ç–æ –ª—É—á—à–µ–µ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–æ –∏–∑ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è.\n\n –°–µ–π—á–∞—Å –í–∞–º –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å "
                                             "–ª–∏—Ü–µ–Ω–∑–∏—é –Ω–∞ —Ä–æ–ª—å –∫–ª–∞—Å—Å–∞.")
        classes_description = "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–ª–∞—Å—Å—ã:\n\n" \
                              "üõ° –†—ã—Ü–∞—Ä—å ‚Äî –≤—ã—Å–æ–∫–∞—è –∑–∞—â–∏—Ç–∞ –∏ —Å—Ä–µ–¥–Ω—è—è –∞—Ç–∞–∫–∞. –ù–æ—Å–∏—Ç –Ω–µ–±–æ–ª—å—à–æ–π —â–∏—Ç –∏ –º–µ—á.\n" \
                              "üßô –ú–∞–≥ ‚Äî –≤—ã—Å–æ–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞, –∞—Ç–∞–∫–∞ –Ω–∏–∂–µ —Å—Ä–µ–¥–Ω–µ–≥–æ, –Ω–∏–∑–∫–∞—è –∑–∞—â–∏—Ç–∞. –ù–æ—Å–∏—Ç –ø–æ—Å–æ—Ö.\n" \
                              "üèπ –õ—É—á–Ω–∏–∫ ‚Äî –≤—ã—Å–æ–∫–∏–π –∫–æ–Ω—Ç—Ä–æ–ª—å, –∞—Ç–∞–∫–∞ –Ω–∏–∂–µ —Å—Ä–µ–¥–Ω–µ–≥–æ, –Ω–∏–∑–∫–∞—è –∑–∞—â–∏—Ç–∞. –ù–æ—Å–∏—Ç –ª—É–∫ (–≤–∞—É).\n" \
                              "üó° –û—Ö–æ—Ç–Ω–∏–∫ ‚Äî –≤—ã—Å–æ–∫–∞—è –∞—Ç–∞–∫–∞, –∑–∞—â–∏—Ç–∞ –Ω–∏–∂–µ —Å—Ä–µ–¥–Ω–µ–≥–æ, –Ω–æ—Å–∏—Ç –∫–ª–∏–Ω–æ–∫.\n\n" \
                              "–ß—Ç–æ –≤—ã–±–µ—Ä–µ—Ç–µ?"
        class_keyboard = [["–†—ã—Ü–∞—Ä—å", "–ú–∞–≥", "–õ—É—á–Ω–∏–∫", "–û—Ö–æ—Ç–Ω–∏–∫"], ["–ù–∞–∑–∞–¥"]]
        markup = ReplyKeyboardMarkup(class_keyboard, one_time_keyboard=True)
        await context.bot.send_message(chat_id=update.effective_chat.id, text=classes_description, reply_markup=markup)
        return CLASS_CHOOSING
    else:
        all_buildings = db.select_all_buildings()
        where_keyboard = []
        for i in range(2, len(all_buildings) // 3 * 3, 3):
            where_keyboard.append([all_buildings[i - 2][1], all_buildings[i - 1][1], all_buildings[i][1]])

        residue_of_buildings = []
        for i in range(len(all_buildings) // 3 * 3 + 1, len(all_buildings)):
            residue_of_buildings.append(all_buildings[i][1])

        where_keyboard.append(residue_of_buildings)
        where_keyboard.append(["–ù–∞–∑–∞–¥"])
        markup = ReplyKeyboardMarkup(where_keyboard, one_time_keyboard=True)
        message = '–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º! –ö—É–¥–∞ –æ—Ç–ø—Ä–∞–≤–∏–º—Å—è?'
        await context.bot.send_message(chat_id=update.effective_chat.id, text=message, reply_markup=markup)
        return WHERE_CHOOSING


async def class_choosing(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    class_name = update.message.text
    user_id = update.message.from_user.id
    context.user_data["choice"] = class_name
    db.update_users('game_class', class_name, user_id)
    db.give_default_items_to_user(user_id, class_name)
    message = f'–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–∏–ª–∏ –ª–∏—Ü–µ–Ω–∑–∏—é –Ω–∞ —Ä–æ–ª—å "{class_name}".\n\n' \
              "–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –í–∞–º –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã –≤—Å–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ —Å–ª—É–∂–∏—Ç–µ–ª—è –∏–º–ø–µ—Ä–∏–∏, " \
              "–æ–¥–Ω–∞–∫–æ –Ω–µ —Ä–∞—Å—Å—Ç—Ä–∞–∏–≤–∞–π—Ç–µ—Å—å, –í–∞–º –±—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã –Ω–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø–æ –º–µ—Ä–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª–µ–¥—É—é—â–∏—Ö —Ä–∞–Ω–≥–æ–≤. " \
              "–í–∞–º –ø—Ä–µ–¥—Å—Ç–æ–∏—Ç –ø—Ä–æ–π—Ç–∏ –º–Ω–æ–≥–æ –∏—Å–ø—ã—Ç–∞–Ω–∏–π –∏ –±–∏—Ç–≤, –Ω–æ –º—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ –í—ã —Å–º–æ–∂–µ—Ç–µ –ø—Ä–µ–æ–¥–æ–ª–µ—Ç—å –≤—Å–µ —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏" \
              " –∏ —Å—Ç–∞—Ç—å –æ–¥–Ω–∏–º –∏–∑ –ª—É—á—à–∏—Ö –≤ –Ω–∞—à–µ–π –∏–º–ø–µ—Ä–∏–∏. –ñ–µ–ª–∞–µ–º –í–∞–º —É–¥–∞—á–∏!"
    await context.bot.send_message(chat_id=update.effective_chat.id, text=message, reply_markup=ReplyKeyboardRemove())
    where_keyboard = [["–î–æ–º –ø–æ—Ä—É—á–µ–Ω–∏–π", "–•—Ä–∞–º –•—Ä–æ–Ω–æ—Å–∞", "–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è"],
                      ["–î–æ–º –≥–∏–ª—å–¥–∏–π", '–ö—É–∑–Ω–∏—Ü–∞', '–ê—Ä–µ–Ω–∞'],
                      ["–ù–∞–∑–∞–¥"]]
    markup = ReplyKeyboardMarkup(where_keyboard, one_time_keyboard=True)
    message = '–ö—É–¥–∞ –æ—Ç–ø—Ä–∞–≤–∏–º—Å—è?'
    await context.bot.send_message(chat_id=update.effective_chat.id, text=message, reply_markup=markup)
    return WHERE_CHOOSING


count_keyboard = [["–í –æ–¥–∏–Ω–æ—á–∫—É", "–° –¥—Ä—É–∑—å—è–º–∏"], ["–ù–∞–∑–∞–¥"]]


async def assignments(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    message = '–í—ã –ø–æ–¥—Ö–æ–¥–∏—Ç–µ –∫ –Ω–µ–±–æ–ª—å—à–æ–º—É –∑–¥–∞–Ω–∏—é —Å –≤—ã–≤–µ—Å–∫–æ–π "–î–æ–º –ø–æ—Ä—É—á–µ–Ω–∏–π". ' \
              '–ü—Ä–∏ –≤—Ö–æ–¥–µ –í—ã –∑–∞–º–µ—á–∞–µ—Ç–µ, —á—Ç–æ –Ω–∞ —Å—Ç–µ–Ω–∞—Ö –≤–∏—Å—è—Ç –¥–æ—Å–∫–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–π —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –∑–∞–¥–∞–Ω–∏—è–º–∏.\n' \
              '–ú–æ–∂–µ—Ç –∏ –ø–æ–ª—É—á–∏—Ç—Å—è –Ω–∞–π—Ç–∏, —á—Ç–æ-—Ç–æ, —á—Ç–æ –í–∞–º –ø–æ –¥—É—à–µ...\n\n' \
              '–í –æ–¥–∏–Ω–æ—á–∫—É –∏–ª–∏ —Å –¥—Ä—É–∑—å—è–º–∏?'
    markup = ReplyKeyboardMarkup(count_keyboard, one_time_keyboard=True)
    await context.bot.send_photo(chat_id=update.effective_chat.id,
                                 photo=merge_photos('RequestHome', update.effective_chat.id))
    await context.bot.send_message(chat_id=update.effective_chat.id, text=message,
                                   reply_markup=markup)
    return TASKS


async def alone_tasks(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user_id = update.message.from_user.id
    if db.check_if_need_to_update_daily_tasks(user_id):
        db.regenerate_daily_tasks(user_id)

    tasks = db.get_cur_user_tasks(user_id, False)
    task_labels = {
        'small': "–ú–µ–ª–∫–æ–µ –ø–æ—Ä—É—á–µ–Ω–∏–µ",
        'medium': "–°—Ä–µ–¥–Ω–µ–µ –ø–æ—Ä—É—á–µ–Ω–∏–µ",
        'class_license': "–ö–ª–∞—Å—Å–æ–≤–∞—è –ª–∏—Ü–µ–Ω–∑–∏—è"
    }

    message = f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è ({cur_date()}):\n\n"
    no_tasks_available = True

    for task_id, label in task_labels.items():
        if tasks[task_id] != -1:
            task = db.get_task_by_id(tasks[task_id])
            message += f"{label}:\n" \
                       f"–ù–∞–∑–≤–∞–Ω–∏–µ: {task[1]}\n" \
                       f"–û–ø–∏—Å–∞–Ω–∏–µ: {task[2]}\n" \
                       f"–°–ª–æ–∂–Ω–æ—Å—Ç—å: {task[3]}\n" \
                       f"–ù–∞–≥—Ä–∞–¥–∞ –æ–ø—ã—Ç–æ–º: {task[4]}\n" \
                       f"–ù–∞–≥—Ä–∞–¥–∞ –ø—Ä–µ–¥–º–µ—Ç–æ–º: {task[5]}\n\n"
            no_tasks_available = False

    if no_tasks_available:
        message += '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–∞ —Å–µ–≥–æ–¥–Ω—è —É –í–∞—Å –±–æ–ª—å—à–µ –Ω–µ—Ç –∑–∞–¥–∞–Ω–∏–π.\n' \
                   '–í–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å –∑–∞–≤—Ç—Ä–∞!'
    else:
        message += '–ö–∞–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ —Ö–æ—Ç–∏—Ç–µ –≤–∑—è—Ç—å?'

    all_tasks_labels = [label for task_id, label in task_labels.items() if tasks[task_id] != -1]
    alone_tasks_keyboard = [all_tasks_labels[:2], all_tasks_labels[2:3], ["–ù–∞–∑–∞–¥"]] if len(all_tasks_labels) >= 2 else [
        all_tasks_labels, ["–ù–∞–∑–∞–¥"]]

    markup = ReplyKeyboardMarkup(alone_tasks_keyboard)
    await context.bot.send_message(chat_id=update.effective_chat.id, text=message, reply_markup=markup)
    return ALONE_TASK_CHOOSING


async def multiplayer_tasks(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user_id = update.message.from_user.id
    if db.check_if_need_to_update_daily_tasks(user_id):
        db.regenerate_daily_tasks(user_id)

    if db.check_if_request_already_exists_in_multiplayer(user_id):
        await context.bot.send_message(chat_id=update.effective_chat.id,
                                       text="–í—ã —É–∂–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –∑–∞–ø—Ä–æ—Å –Ω–∞ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏–π —Å –¥—Ä—É–∑—å—è–º–∏!")
        return TASKS
    context.user_data['multiplayer_task_id'] = db.get_cur_user_tasks(user_id, True)
    task_labels = {
        'special': "–î–µ–ª–æ –æ—Å–æ–±–æ–π –≤–∞–∂–Ω–æ—Å—Ç–∏",
        'random': "–°–±–æ—Ä —Ä–µ—Å—É—Ä—Å–æ–≤"
    }

    message = f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è ({cur_date()}):\n\n"
    no_tasks_available = True
    for task_id, label in task_labels.items():
        if context.user_data['multiplayer_task_id'][task_id] != -1:
            task = db.get_task_by_id(context.user_data['multiplayer_task_id'][task_id])
            message += f"{label}:\n" \
                       f"–ù–∞–∑–≤–∞–Ω–∏–µ: {task[1]}\n" \
                       f"–û–ø–∏—Å–∞–Ω–∏–µ: {task[2]}\n" \
                       f"–°–ª–æ–∂–Ω–æ—Å—Ç—å: {task[3]}\n" \
                       f"–ù–∞–≥—Ä–∞–¥–∞ –æ–ø—ã—Ç–æ–º: {task[4]}\n" \
                       f"–ù–∞–≥—Ä–∞–¥–∞ –ø—Ä–µ–¥–º–µ—Ç–æ–º: {task[5]}\n\n"
            no_tasks_available = False

    if no_tasks_available:
        message += '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–∞ —Å–µ–≥–æ–¥–Ω—è —É –í–∞—Å –±–æ–ª—å—à–µ –Ω–µ—Ç –∑–∞–¥–∞–Ω–∏–π.\n' \
                   '–í–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å –∑–∞–≤—Ç—Ä–∞!'
    else:
        message += '–ö–∞–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ —Ö–æ—Ç–∏—Ç–µ –≤–∑—è—Ç—å?'

    all_tasks_labels = [label for task_id, label in task_labels.items() if
                        context.user_data['multiplayer_task_id'][task_id] != -1]
    alone_tasks_keyboard = [all_tasks_labels[:2], all_tasks_labels[2:3], ["–ù–∞–∑–∞–¥"]] if len(all_tasks_labels) >= 2 else [
        all_tasks_labels, ["–ù–∞–∑–∞–¥"]]

    markup = ReplyKeyboardMarkup(alone_tasks_keyboard)
    await context.bot.send_message(chat_id=update.effective_chat.id, text=message, reply_markup=markup)
    return MULTIPLAYER_TASK_CHOOSING


async def get_special_task(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    friends = db.get_friend_list_ids(update.effective_chat.id)
    text = "–í–∞—à —Å–ø–∏—Å–æ–∫ –¥—Ä—É–∑–µ–π:\n"
    for friend in friends:
        text += str(friend) + "\n"
    text += f"\n–í–≤–µ–¥–∏—Ç–µ ID –ª—é–¥–µ–π (–æ—Ç 1 –¥–æ 3), –∫–æ—Ç–æ—Ä—ã—Ö —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å\n–í–≤–æ–¥–∏—Ç–µ –∫–∞–∂–¥—ã–π ID —Å " \
            f"–Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏!"
    await context.bot.send_message(chat_id=update.effective_chat.id, text=text)
    return GET_USER_FOR_SPECIAL_MULTIPLAYER_ID


async def get_random_task(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    friends = db.get_friend_list_ids(update.effective_chat.id)
    text = "–í–∞—à —Å–ø–∏—Å–æ–∫ –¥—Ä—É–∑–µ–π:\n"
    for friend in friends:
        text += str(friend) + "\n"
    text += f"\n–í–≤–µ–¥–∏—Ç–µ ID –ª—é–¥–µ–π (–æ—Ç 1 –¥–æ 3), –∫–æ—Ç–æ—Ä—ã—Ö —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å\n–í–≤–æ–¥–∏—Ç–µ –∫–∞–∂–¥—ã–π ID —Å " \
            f"–Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏!"
    await context.bot.send_message(chat_id=update.effective_chat.id, text=text)
    return GET_USER_FOR_RANDOM_MULTIPLAYER_ID


async def get_ids_for_special_multiplayer_task(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user_ids = update.message.text
    task_id = context.user_data['multiplayer_task_id']['special']
    result = db.add_multiplayer_participants(update.message.from_user.id, task_id, user_ids)
    if not result[0]:
        await context.bot.send_message(chat_id=update.effective_chat.id, text=result[1])
        return MULTIPLAYER_TASK_CHOOSING
    keyboard = [
        [
            InlineKeyboardButton("–ü—Ä–∏–Ω—è—Ç—å", callback_data="accept_multiplayer_task"),
            InlineKeyboardButton("–û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data="reject_multiplayer_task"),
        ]
    ]
    user_ids = list(map(int, user_ids.split()))
    reply_markup = InlineKeyboardMarkup(keyboard)
    for user in user_ids:
        try:
            await context.bot.send_message(chat_id=user,
                                           text=f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {update.effective_chat.id} –ø—Ä–∏–≥–ª–∞—Å–∏–ª –í–∞—Å –Ω–∞ "
                                                f"—Å–æ–≤–º–µ—Å—Ç–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ.\n\n"
                                                f"–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ –ª–∏ –í—ã —Å–≤–æ—ë —É—á–∞—Å—Ç–∏–µ?",
                                           reply_markup=reply_markup)
        except telegram.error.BadRequest:
            await context.bot.send_message(chat_id=update.effective_chat.id,
                                           text="–û–¥–∏–Ω –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
            db.delete_multiplayer_task_participants(update.effective_chat.id)
            return MULTIPLAYER_TASK_CHOOSING
    markup = ReplyKeyboardMarkup(count_keyboard, one_time_keyboard=True)
    await context.bot.send_message(chat_id=update.effective_chat.id, text="–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã!",
                                   reply_markup=markup)
    return TASKS


async def get_ids_for_random_multiplayer_task(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user_ids = update.message.text
    task_id = context.user_data['multiplayer_task_id']['random']
    result = db.add_multiplayer_participants(update.message.from_user.id, task_id, user_ids)
    if not result[0]:
        await context.bot.send_message(chat_id=update.effective_chat.id, text=result[1])
        return MULTIPLAYER_TASK_CHOOSING
    keyboard = [
        [
            InlineKeyboardButton("–ü—Ä–∏–Ω—è—Ç—å", callback_data="accept_multiplayer_task"),
            InlineKeyboardButton("–û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data="reject_multiplayer_task"),
        ]
    ]
    user_ids = list(map(int, user_ids.split()))
    reply_markup = InlineKeyboardMarkup(keyboard)
    for user in user_ids:
        try:
            await context.bot.send_message(chat_id=user,
                                           text=f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {update.effective_chat.id} –ø—Ä–∏–≥–ª–∞—Å–∏–ª –í–∞—Å –Ω–∞ "
                                                f"—Å–æ–≤–º–µ—Å—Ç–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ.\n\n"
                                                f"–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ –ª–∏ –í—ã —Å–≤–æ—ë —É—á–∞—Å—Ç–∏–µ?",
                                           reply_markup=reply_markup)
        except telegram.error.BadRequest:
            await context.bot.send_message(chat_id=update.effective_chat.id,
                                           text="–û–¥–∏–Ω –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
            db.delete_multiplayer_task_participants(update.effective_chat.id)
            return MULTIPLAYER_TASK_CHOOSING
    markup = ReplyKeyboardMarkup(count_keyboard, one_time_keyboard=True)
    await context.bot.send_message(chat_id=update.effective_chat.id, text="–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã!",
                                   reply_markup=markup)
    return TASKS


async def chronos(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    if not check_if_user_exp_is_enough(update.message.from_user.id, 500):
        message = '–í—ã –ø–æ–¥—Ö–æ–¥–∏—Ç–µ –∫ –æ–≥—Ä–æ–º–Ω–æ–º—É —Ö—Ä–∞–º—É, –Ω–æ –∫–∞–∫–∞—è-—Ç–æ –Ω–µ–≤–µ–¥–æ–º–∞—è —Å–∏–ª–∞ –Ω–µ –¥–∞—ë—Ç –í–∞–º –ø—Ä–æ–π—Ç–∏ –≤–Ω—É—Ç—Ä—å.\n–í–æ–∑–º–æ–∂–Ω–æ, ' \
                  '–í–∞–º –ø–æ–∫–∞ —á—Ç–æ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –æ–ø—ã—Ç–∞.'
        await context.bot.send_message(chat_id=update.effective_chat.id, text=message)
    else:
        message = '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –•—Ä–∞–º –•—Ä–æ–Ω–æ—Å–∞. –ó–¥–µ—Å—å –≤—ã —Å–º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—ã–µ –Ω–∞–≤—ã–∫–∏ –¥–ª—è —Å–≤–æ–µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞, ' \
                  '–∞ —Ç–∞–∫–∂–µ, –ø–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–≥–æ —Ä–∞–Ω–≥–∞, –∏–∑–º–µ–Ω–∏—Ç—å –ø–æ–¥–∫–ª–∞—Å—Å.'
        if not check_if_user_exp_is_enough(update.message.from_user.id,
                                           2000):  # –ï—Å–ª–∏ –æ–ø—ã—Ç –±–æ–ª—å—à–µ 2000, –¥–∞—ë–º –¥–æ—Å—Ç—É–ø –∫ —Å–º–µ–Ω–µ –ø–æ–¥–∫–ª–∞—Å—Å–∞
            chronos_keyboard = [["–£–ª—É—á—à–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞"], ["–ù–∞–∑–∞–¥"]]
        else:
            chronos_keyboard = [["–£–ª—É—á—à–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞", "–ò–∑–º–µ–Ω–∏—Ç—å –ø–æ–¥–∫–ª–∞—Å—Å"], ["–ù–∞–∑–∞–¥"]]
        markup = ReplyKeyboardMarkup(chronos_keyboard, one_time_keyboard=True)
        await context.bot.send_photo(chat_id=update.effective_chat.id,
                                     photo=merge_photos('Chronos', update.effective_chat.id))
        await context.bot.send_message(chat_id=update.effective_chat.id, text=message, reply_markup=markup)
        return CHRONOS_CHOOSING


async def upgrade_champ(update: Update, context: ContextTypes.DEFAULT_TYPE):
    pass  # –ó–¥–µ—Å—å –±—É–¥–µ—Ç —É–ª—É—á—à–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞


async def change_subclass(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if check_if_user_exp_is_enough(update.message.from_user.id, 1000):
        con = create_connection('../db/database.db')
        user_id = update.message.from_user.id
        request = f"SELECT game_class FROM users WHERE id={user_id}"
        class_data = execute_read_query(con, request)
        con.close()
        if class_data[0][0] == '–†—ã—Ü–∞—Ä—å':
            subclass_keyboard = [["–õ–∞—Ç–Ω–∏–∫", "–ü–∞–ª–∞–¥–∏–Ω"], ["–ù–∞–∑–∞–¥"]]
            message = "–û–ø–∏—Å–∞–Ω–∏–µ –ø–æ–¥–∫–ª–∞—Å—Å–æ–≤:\n\n" \
                      "‚öúÔ∏è –õ–∞—Ç–Ω–∏–∫ - —É–ø–æ—Ä –≤ –∑–∞—â–∏—Ç—É, –Ω–æ—Å–∏—Ç –º–∞—Å—Å–∏–≤–Ω—ã–π —â–∏—Ç –∏ –º–µ—á\n" \
                      "‚öîÔ∏è –ü–∞–ª–∞–¥–∏–Ω - —É–ø–æ—Ä –≤ –∞—Ç–∞–∫—É, –Ω–æ—Å–∏—Ç —Ç—è–∂–µ–ª—ã–µ –¥–æ—Å–ø–µ—Ö–∏ –∏ –º–æ–ª–æ—Ç"

        elif class_data[0][0] == '–ú–∞–≥':
            subclass_keyboard = [["–ß–µ—Ä–Ω–æ–∫–Ω–∏–∂–Ω–∏–∫", "–≠–ª–µ–º–µ–Ω—Ç–∞–ª—å", "–ê–Ω–≥–µ–ª"], ["–ù–∞–∑–∞–¥"]]
            message = "–û–ø–∏—Å–∞–Ω–∏–µ –ø–æ–¥–∫–ª–∞—Å—Å–æ–≤:\n\n" \
                      "üìì –ß–µ—Ä–Ω–æ–∫–Ω–∏–∂–Ω–∏–∫ - —É–ø–æ—Ä –≤ –∞—Ç–∞–∫—É, –Ω–æ—Å–∏—Ç –∫–Ω–∏–≥—É\n" \
                      "üî• –≠–ª–µ–º–µ–Ω—Ç–∞–ª—å - —É–ø–æ—Ä –≤ –∫–æ–Ω—Ç—Ä–æ–ª—å, –Ω–æ—Å–∏—Ç –ø–æ—Å–æ—Ö\n" \
                      "üí´ –ê–Ω–≥–µ–ª - —É–ø–æ—Ä –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É, –Ω–æ—Å–∏—Ç –ø–µ—Ä—á–∞—Ç–∫–∏"
        elif class_data[0][0] == '–õ—É—á–Ω–∏–∫':
            subclass_keyboard = [["–ê—Ä–±–∞–ª–µ—Ç—á–∏–∫", "–®–∞–º–∞–Ω", "–ò–Ω–∂–µ–Ω–µ—Ä"], ["–ù–∞–∑–∞–¥"]]
            message = "–û–ø–∏—Å–∞–Ω–∏–µ –ø–æ–¥–∫–ª–∞—Å—Å–æ–≤:\n\n" \
                      "‚Ü£ –ê—Ä–±–∞–ª–µ—Ç—á–∏–∫ - —É–ø–æ—Ä –≤ –∞—Ç–∞–∫—É, –Ω–æ—Å–∏—Ç –∞–≤—Ç–æ–º–∞—Ç, –Ω–∞–µ–±–∞–ª, –∞—Ä–±–∞–ª–µ—Ç\n" \
                      "üèπ –®–∞–º–∞–Ω - —É–ø–æ—Ä –≤ –∫–æ–Ω—Ç—Ä–æ–ª—å, –Ω–æ—Å–∏—Ç –ª—É–∫ –∏ –∫–æ–ª—á–∞–Ω\n" \
                      "üí• –ò–Ω–∂–µ–Ω–µ—Ä - —É–ø–æ—Ä –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É, –Ω–æ—Å–∏—Ç"  # –°—é–¥–∞ –¥–æ–±–∞–≤–∏—Ç—å —á—Ç–æ –Ω–æ—Å–∏—Ç
        elif class_data[0][0] == '–û—Ö–æ—Ç–Ω–∏–∫':
            subclass_keyboard = [["–£–±–∏–π—Ü–∞", "–®–∏–Ω–æ–±–∏"], ["–ù–∞–∑–∞–¥"]]
            message = "–û–ø–∏—Å–∞–Ω–∏–µ –ø–æ–¥–∫–ª–∞—Å—Å–æ–≤:\n\n" \
                      "‚öî –£–±–∏–π—Ü–∞ - —É–ø–æ—Ä –≤ –∞—Ç–∞–∫—É, –Ω–æ—Å–∏—Ç –∫–∏–Ω–∂–∞–ª—ã\n" \
                      "üó° –®–∏–Ω–æ–±–∏ - —É–ø–æ—Ä –≤ –∞—Ç–∞–∫—É –∏ –∫–æ–Ω—Ç—Ä–æ–ª—å, –Ω–æ—Å–∏—Ç –∫–ª–∏–Ω–æ–∫"
        else:
            return logging.error(f"SUBCLASSES DO NOT EXIT FOR CLASS {class_data[0][0]}")
        markup = ReplyKeyboardMarkup(subclass_keyboard, one_time_keyboard=True)
        await context.bot.send_message(chat_id=update.effective_chat.id, text=message, reply_markup=markup)
        return SUBCLASS_CHOOSING
    else:
        message = '–£ –≤–∞—Å –ø–æ–∫–∞ —á—Ç–æ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–º–µ–Ω–µ –ø–æ–¥–∫–ª–∞—Å—Å–∞!'
        await context.bot.send_message(chat_id=update.effective_chat.id, text=message)


async def subclass_choosing(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    text = update.message.text
    user_id = update.message.from_user.id
    context.user_data["choice"] = text
    db.update_users('game_subclass', text, user_id)
    message = f'–í—ã —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–∏–ª–∏ –ø–æ–¥–∫–ª–∞—Å—Å –Ω–∞ "{text}!"'
    await context.bot.send_message(chat_id=update.effective_chat.id, text=message)


async def lab(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    if not check_if_user_exp_is_enough(update.message.from_user.id, 500):
        message = '–í—ã –ø—Ä–∏—Ö–æ–¥–∏—Ç–µ –∫ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–∏, –Ω–æ –¥–≤–µ—Ä—å –æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –∑–∞–∫—Ä—ã—Ç–æ–π.\n–í–æ–∑–º–æ–∂–Ω–æ, –í–∞–º –ø–æ–∫–∞ —á—Ç–æ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –æ–ø—ã—Ç–∞.'
        await context.bot.send_message(chat_id=update.effective_chat.id, text=message)
    else:
        await context.bot.send_photo(chat_id=update.effective_chat.id,
                                     photo=merge_photos('Lab', update.effective_chat.id))
        message = "–ß—Ç–æ –í—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?"
        lab_keyboard = [["–°–æ–∑–¥–∞—Ç—å —Ä–∞—Å—Ö–æ–¥–Ω–∏–∫–∏", "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–µ—Å—É—Ä—Å—ã"], ['–ù–∞–∑–∞–¥']]
        markup = ReplyKeyboardMarkup(lab_keyboard, one_time_keyboard=False)
        await context.bot.send_message(chat_id=update.effective_chat.id, text=message, reply_markup=markup)
        return LAB_CHOOSING


async def craft_choosing(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:  # TODO –ó–∞–º–µ–Ω–∏—Ç—å –∫—Ä–∞—Ñ—Ç—ã –≤ –±–¥
    message = "–ù–∞ —Å—Ç–µ–Ω–µ –í—ã –≤–∏–¥–∏—Ç–µ —Ä–µ—Ü–µ–ø—Ç—ã —Ä–∞—Å—Ö–æ–¥–Ω–∏–∫–æ–≤:\n\n" \
              "1. –ì—Ä–∞–Ω–∞—Ç–∞: –∫–∞–º–µ–Ω—å + –º–µ—Ç–∞–ª–ª\n" \
              "2. –ú–∏–∫—Å—Ç—É—Ä–∞ –ò–≤–ª–µ–≤–∞: –ø–æ–¥–æ—Ä–æ–∂–Ω–∏–∫ + —è—Ä–∫–æ—Å–≤–µ—Ç\n" \
              "3. –†–µ–≥–µ–Ω–µ—Ä–∞—Ç–∏–≤–Ω—ã–π —ç–ª–∏–∫—Å–∏—Ä: –ø–æ–¥–æ—Ä–æ–∂–Ω–∏–∫ + –°–≤—è—Ç–∞—è –≤–æ–¥–∞\n" \
              "4. –ë–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–ª–∏–∫—Å–∏—Ä: –°–≤—è—Ç–∞—è –≤–æ–¥–∞ + —è—Ä–∫–æ—Å–≤–µ—Ç\n" \
              "5. –í–µ—Ç—Ä—è–Ω–æ–µ –∑–µ–ª—å–µ: –ø–µ—Ä—å—è + –≥—Ä–∏–±—ã\n" \
              "6. –û–≥–Ω–µ–Ω–Ω–∞—è –±–∞–Ω–∫–∞: –∑–æ–ª–æ—Ç–æ + –º–µ—Ç–∞–ª–ª\n" \
              "7. –ó–µ–ª—å–µ –º–µ—Ç–∞–ª–ª–∏—á–µ—Å–∫–æ–π –∫–æ–∂–∏ - –º–µ—Ç–∞–ª–ª + –ø–æ–¥–æ—Ä–æ–∂–Ω–∏–∫\n" \
              "8. –°–∫–ª—è–Ω–∫–∞ –ª–µ–¥—è–Ω–æ–π –¥—É—à–∏: —Ö–ª–∞–¥–æ–≤–∏–∫ + –¥—Ä–µ–≤–µ—Å–∏–Ω–∞\n" \
              "9. –ú–∏–∫—Å—Ç—É—Ä–∞ –≥—Ä–∏–±–Ω–æ–≥–æ —Å–º–µ—â–µ–Ω–∏—è: –≥—Ä–∏–±—ã + –°–≤—è—Ç–∞—è –≤–æ–¥–∞\n" \
              "10. –ñ–∏–¥–∫–æ—Å—Ç—å –æ—Å–ª–µ–ø–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ–∫–ª—è—Ç–∏—è: –ø–µ—Ä—å—è + —è—Ä–∫–æ—Å–≤–µ—Ç\n\n" \
              "–í—ã –≤–æ—à–ª–∏ –≤ —Ä–µ—à–∏–º —Å–æ–∑–¥–∞–Ω–∏—è. –ß—Ç–æ–±—ã –≤—ã–π—Ç–∏ –∏–∑ –Ω–µ–≥–æ, –Ω–∞–∂–º–∏—Ç–µ '–ù–∞–∑–∞–¥'\n" \
              "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ä–∞—Å—Ö–æ–¥–Ω–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –µ–≥–æ"
    await context.bot.send_message(chat_id=update.effective_chat.id, text=message, reply_markup=back_markup)
    return GETTING_ITEM_ID


async def craft(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    item_number = update.message.text
    if not item_number.isdigit():
        message = "–í–≤–µ–¥—ë–Ω–Ω—ã–π –í–∞–º–∏ —Ç–µ–∫—Å—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º!"
        await context.bot.send_message(chat_id=update.effective_chat.id, text=message, reply_markup=back_markup)
        return GETTING_ITEM_ID
    if int(item_number) == 69:
        message = "–ë–æ—Ä–¥–µ–ª—å –≤ –Ω–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è –∑–∞–∫—Ä—ã—Ç, –ø—Ä–∏–Ω–æ—Å–∏–º —Å–≤–æ–∏ –∏–∑–≤–µ–Ω–µ–Ω–∏—è"
        await context.bot.send_message(chat_id=update.effective_chat.id, text=message, reply_markup=back_markup)
        return GETTING_ITEM_ID
    elif int(item_number) > 10 or int(item_number) < 1:
        message = "–¢–∞–∫–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!"
        await context.bot.send_message(chat_id=update.effective_chat.id, text=message, reply_markup=back_markup)
        return GETTING_ITEM_ID
    result = db.craft_item(update.message.from_user.id, item_number)
    await context.bot.send_message(chat_id=update.effective_chat.id, text=result, reply_markup=back_markup)


async def show_items(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    text = db.get_inventory_by_user_id(update.message.from_user.id)
    await context.bot.send_message(chat_id=update.effective_chat.id, text=text)


async def guild_house(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    if not check_if_user_exp_is_enough(update.message.from_user.id, 1000):
        message = '–í—ã –ø—Ä–∏—Ö–æ–¥–∏—Ç–µ –∫ –¥–æ–º—É –≥–∏–ª—å–¥–∏–π. –ü–æ –∫—Ä–∞–π–Ω–µ–π –º–µ—Ä–µ —Ç–∞–∫ —Å–∫–∞–∑–∞–ª —Å—Ç—Ä–∞–∂–Ω–∏–∫...\n–û–Ω –Ω–µ –ø—Ä–æ–ø—É—Å–∫–∞–µ—Ç –í–∞—Å –ø–æ–¥ ' \
                  '–ø—Ä–µ–¥–ª–æ–≥–æ–º, —á—Ç–æ –í—ã –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –æ–ø—ã—Ç–Ω—ã.'
        await context.bot.send_message(chat_id=update.effective_chat.id, text=message)
    else:
        message = "–í—ã –ø—Ä–∏—Ö–æ–¥–∏—Ç–µ –≤ –¥–æ–º –≥–∏–ª—å–¥–∏–π. –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –∑–∞–ø—Ä–æ—Å–∏—Ç—å –∏–ª–∏ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —Ä–µ—Å—É—Ä—Å–∞–º–∏ —Å –¥—Ä—É–≥–∏–º–∏ " \
                  "–∏–≥—Ä–æ–∫–∞–º–∏.\n\n–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?"
        guild_keyboard = [['–ó–∞–ø—Ä–æ—Å–∏—Ç—å —Ä–µ—Å—É—Ä—Å—ã', '–ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Ä–µ—Å—É—Ä—Å–∞–º–∏'], ['–ù–∞–∑–∞–¥']]
        guild_markup = ReplyKeyboardMarkup(guild_keyboard, one_time_keyboard=False)
        await context.bot.send_photo(chat_id=update.effective_chat.id,
                                     photo=merge_photos('GuildHouse', update.effective_chat.id), caption=message,
                                     reply_markup=guild_markup)
        return GUILD_CHOOSING


async def res_request(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    message = "–í–æ—Ç —á—Ç–æ –í—ã –º–æ–∂–µ—Ç–µ –∑–∞–ø—Ä–æ—Å–∏—Ç—å:\n" \
              "1 - –ú–µ—Ç–∞–ª\n" \
              "2 - –ì—Ä–∏–±—ã\n" \
              "3 - –ö–∞–º–Ω–∏\n" \
              "4 - –î—Ä–µ–≤–µ—Å–∏–Ω–∞\n" \
              "5 - –•–ª–∞–¥–æ–≤–∏–∫\n" \
              "6 - –ü–µ—Ä—å—è\n" \
              "7 - –Ø—Ä–∫–æ—Å–≤–µ—Ç\n" \
              "8 - –ü–æ–¥–æ—Ä–æ–∂–Ω–∏–∫\n" \
              "9 - –°–≤—è—Ç–∞—è –≤–æ–¥–∞\n" \
              "10 - –ó–æ–ª–æ—Ç–æ\n\n" \
              "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ä–µ—Å—É—Ä—Å–∞ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ (—á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª, –Ω–µ –±–æ–ª—å—à–µ 10 —Ä–µ—Å—É—Ä—Å–æ–≤)\n" \
              "–ü–æ–º–Ω–∏—Ç–µ: —á–µ–º –º–µ–Ω—å—à–µ –í—ã –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç–µ, —Ç–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–µ–µ –í–∞—à –∑–∞–ø—Ä–æ—Å!"
    await context.bot.send_message(chat_id=update.effective_chat.id, text=message, reply_markup=back_markup)
    return GUILD_REQUEST


async def create_res_request(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    res_string = update.message.text
    ans = db.add_guild_request(update.message.from_user.id, res_string)
    await context.bot.send_message(chat_id=update.effective_chat.id, text=ans, reply_markup=back_markup)


async def res_share(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    message = db.get_guild_requests(update.message.from_user.id)
    if message[0]:
        await context.bot.send_message(chat_id=update.effective_chat.id, text=message[1], reply_markup=back_markup)
        return GUILD_ID_GETTING
    else:
        await context.bot.send_message(chat_id=update.effective_chat.id, text=message[1])


async def request_id_getting(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    request_id = update.message.text
    ans = db.send_res(update.message.from_user.id, request_id)
    await context.bot.send_message(chat_id=update.effective_chat.id, text=ans, reply_markup=back_markup)


async def forge(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    if not check_if_user_exp_is_enough(update.message.from_user.id, 4000):
        message = '–í—ã –ø–æ–¥—Ö–æ–¥–∏—Ç–µ –∫ –∫—É–∑–Ω–∏—Ü–µ, –Ω–æ –º–∞—Å—Ç–µ—Ä-–∫—É–∑–Ω–µ—Ü –∫–∞—Ç–µ–≥–æ—Ä–∏—á–µ—Å–∫–∏ –æ—Ç–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏–Ω–∏–º–∞—Ç—å –í–∞—à –∑–∞–∫–∞–∑. \n' \
                  '–û–Ω –æ–±—ä—è—Å–Ω—è–µ—Ç, —á—Ç–æ –µ–≥–æ —Ä–∞–±–æ—Ç–∞ —Ç—Ä–µ–±—É–µ—Ç –±–æ–ª—å—à–æ–≥–æ –æ–ø—ã—Ç–∞ –∏ –º–∞—Å—Ç–µ—Ä—Å—Ç–≤–∞, –∏ –æ–Ω –Ω–µ —Ö–æ—á–µ—Ç —Ä–∏—Å–∫–æ–≤–∞—Ç—å' \
                  ' –∏—Å–ø–æ—Ä—Ç–∏—Ç—å –∏–∑–¥–µ–ª–∏–µ.'
        await context.bot.send_message(chat_id=update.effective_chat.id, text=message)
    else:
        forge_keyboard = [['–û—Ä—É–∂–∏–µ', '–ë—Ä–æ–Ω—è'], ['–ß–∞—Ä—ã –Ω–∞ –æ—Ä—É–∂–∏–µ', '–ß–∞—Ä—ã –Ω–∞ –±—Ä–æ–Ω—é'], ['–ù–∞–∑–∞–¥']]
        forge_markup = ReplyKeyboardMarkup(forge_keyboard, one_time_keyboard=True)
        await context.bot.send_photo(chat_id=update.effective_chat.id,
                                     photo=merge_photos('AnvilHouse', update.effective_chat.id),
                                     caption="–ß—Ç–æ –±—ã –í—ã —Ö–æ—Ç–µ–ª–∏ —Å–¥–µ–ª–∞—Ç—å?", reply_markup=forge_markup)
        return FORGE_CHOOSING


async def weapon_creating(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    message = db.show_possible_item_crafts('weapon', db.get_eng_class(update.message.from_user.id))
    await context.bot.send_message(chat_id=update.effective_chat.id,
                                   text=message + '\n–í–≤–µ–¥–∏—Ç–µ ID –æ—Ä—É–∂–∏—è, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å',
                                   reply_markup=back_markup)
    return ITEM_INPUT


async def armor_creating(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    message = db.show_possible_item_crafts('armor', db.get_eng_class(update.message.from_user.id))
    await context.bot.send_message(chat_id=update.effective_chat.id,
                                   text=message + '\n–í–≤–µ–¥–∏—Ç–µ ID –±—Ä–æ–Ω–∏, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å',
                                   reply_markup=back_markup)
    return ITEM_INPUT


async def get_item_id(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    item_id = update.message.text
    message = db.create_new_item(update.message.from_user.id, item_id)
    await context.bot.send_message(chat_id=update.effective_chat.id,
                                   text=message,
                                   reply_markup=back_markup)


async def weapon_enchant(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    items = db.get_users_items(update.message.from_user.id)
    message = "–í–∞—à–µ –æ—Ä—É–∂–∏–µ:\n\n"
    for item in items:
        if item[2] == 'weapon':
            message += f"ID: {item[5]}\n" \
                       f"–ù–∞–∑–≤–∞–Ω–∏–µ: {item[0]}\n" \
                       f"–°–∏–ª–∞: {item[3]}\n"
            if item[1] == "" or item[1] is None:
                message += "–ó–∞—á–∞—Ä–æ–≤–∞–Ω–∏–π –Ω–µ—Ç.\n\n"
            else:
                message += "–ó–∞—á–∞—Ä–æ–≤–∞–Ω–∏—è: "
                ench_names = []
                for ench in item[1].split(','):
                    ench_name = db.get_ench_name_by_id(ench, item[2])
                    ench_names.append(ench_name)
                ench_str = ", ".join(ench_names)
                message += ench_str
                message += "\n\n"
    message += "–í–≤–µ–¥–∏—Ç–µ ID –æ—Ä—É–∂–∏—è, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –∑–∞—á–∞—Ä–æ–≤–∞—Ç—å\n" \
               "–í—ã –ø–æ–ª—É—á–∏—Ç–µ —Å–ª—É—á–∞–π–Ω—É—é —á–∞—Ä—É –∑–∞ 200 –º–æ–Ω–µ—Ç."
    await context.bot.send_message(chat_id=update.effective_chat.id,
                                   text=message,
                                   reply_markup=back_markup)
    return WEAPON_ID_FOR_ENCHANT


async def get_weapon_id_to_enchant(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    weapon_id = update.message.text
    message = db.add_enchant(weapon_id, 'weapon', update.message.from_user.id)
    await context.bot.send_message(chat_id=update.effective_chat.id,
                                   text=message,
                                   reply_markup=back_markup)


async def armor_enchant(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    items = db.get_users_items(update.message.from_user.id)
    message = "–í–∞—à–∞ –±—Ä–æ–Ω—è:\n\n"
    for item in items:
        if item[2] == 'armor':
            message += f"ID: {item[5]}\n" \
                       f"–ù–∞–∑–≤–∞–Ω–∏–µ: {item[0]}\n" \
                       f"–°–∏–ª–∞: {item[3]}\n"
            if item[1] == "" or item[1] is None:
                message += "–ó–∞—á–∞—Ä–æ–≤–∞–Ω–∏–π –Ω–µ—Ç.\n\n"
            else:
                message += "–ó–∞—á–∞—Ä–æ–≤–∞–Ω–∏—è: "
                ench_names = []
                for ench in item[1].split(','):
                    ench_name = db.get_ench_name_by_id(ench, item[2])
                    ench_names.append(ench_name)
                ench_str = ", ".join(ench_names)
                message += ench_str
                message += "\n\n"
    message += "–í–≤–µ–¥–∏—Ç–µ ID –±—Ä–æ–Ω–∏, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –∑–∞—á–∞—Ä–æ–≤–∞—Ç—å.\n" \
               "–í—ã –ø–æ–ª—É—á–∏—Ç–µ —Å–ª—É—á–∞–π–Ω—É—é —á–∞—Ä—É –∑–∞ 200 –º–æ–Ω–µ—Ç."
    await context.bot.send_message(chat_id=update.effective_chat.id,
                                   text=message,
                                   reply_markup=back_markup)
    return ARMOR_ID_FOR_ENCHANT


async def get_armor_id_to_enchant(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    weapon_id = update.message.text
    message = db.add_enchant(weapon_id, 'armor', update.message.from_user.id)
    await context.bot.send_message(chat_id=update.effective_chat.id,
                                   text=message,
                                   reply_markup=back_markup)


arena_keyboard = [['–í—ã–∑–≤–∞—Ç—å –Ω–∞ –¥—É—ç–ª—å', '–°–æ–∑–¥–∞—Ç—å –æ—Ç–∫—Ä—ã—Ç—É—é –¥—É—ç–ª—å'], ['–ù–∞–∑–∞–¥']]
back_keyboard = [['–ù–∞–∑–∞–¥']]
back_markup = ReplyKeyboardMarkup(back_keyboard, one_time_keyboard=True)


async def arena(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    if not check_if_user_exp_is_enough(update.message.from_user.id, 8000):
        message = '–í—ã –ø—Ä–∏—Ö–æ–¥–∏—Ç–µ –Ω–∞ –∞—Ä–µ–Ω—É –¥–ª—è —Å—Ä–∞–∂–µ–Ω–∏–π, –Ω–æ –æ—Ö—Ä–∞–Ω–Ω–∏–∫ –Ω–µ –ø—É—Å–∫–∞–µ—Ç –í–∞—Å –≤–Ω—É—Ç—Ä—å.\n–û–Ω –æ–±—ä—è—Å–Ω—è–µ—Ç, —á—Ç–æ –Ω–∞ –∞—Ä–µ–Ω–µ ' \
                  '—Å—Ä–∞–∂–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –æ–ø—ã—Ç–Ω—ã–µ –∏ –∑–Ω–∞—é—â–∏–µ —Å–≤–æ–µ –¥–µ–ª–æ –±–æ–π—Ü—ã, –∏ –æ–Ω –Ω–µ —Ö–æ—á–µ—Ç –¥–æ–ø—É—Å—Ç–∏—Ç—å —Ä–∏—Å–∫–∞ –¥–ª—è –í–∞—à–µ–π –∂–∏–∑–Ω–∏.\n' \
                  '–í–æ–∑–º–æ–∂–Ω–æ, –í–∞–º –µ—â–µ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –æ–ø—ã—Ç–∞ –∏ –Ω–∞–≤—ã–∫–æ–≤ –≤ –±–æ—é, –∏ –í–∞–º —Å—Ç–æ–∏—Ç –ø–æ—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å—Å—è –∏ –Ω–∞–±—Ä–∞—Ç—å—Å—è –æ–ø—ã—Ç–∞, ' \
                  '—á—Ç–æ–±—ã –¥–æ–∫–∞–∑–∞—Ç—å —Å–≤–æ—é –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ —Å—Ä–∞–∂–µ–Ω–∏—è–º –Ω–∞ –∞—Ä–µ–Ω–µ.'
        await context.bot.send_message(chat_id=update.effective_chat.id, text=message)
    else:
        await context.bot.send_photo(chat_id=update.effective_chat.id,
                                     photo=merge_photos('Arena', update.effective_chat.id))
        markup = ReplyKeyboardMarkup(arena_keyboard, one_time_keyboard=True)
        message = '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ'
        await context.bot.send_message(chat_id=update.effective_chat.id, text=message, reply_markup=markup)
        return ARENA_CHOOSING


async def challenge_to_duel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    message = "–í–≤–µ–¥–∏—Ç–µ ID –∏–≥—Ä–æ–∫–∞, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–∑–≤–∞—Ç—å –Ω–∞ –¥—É—ç–ª—å"
    await context.bot.send_message(chat_id=update.effective_chat.id, text=message, reply_markup=back_markup)
    return GET_USER_TO_DUEL_ID


async def get_user_duel_id(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    getting_user_id = update.message.text
    if not getting_user_id.isdigit():
        response = "ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–≤—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º!"
        markup = ReplyKeyboardMarkup(arena_keyboard, resize_keyboard=True)
        await context.bot.send_message(chat_id=update.effective_chat.id, text=response, reply_markup=markup)
        return ARENA_CHOOSING
    if not db.check_if_could_send_duel(update.message.from_user.id, getting_user_id):
        response = "–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ—Ç—Ä–ø–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –¥–∞–Ω–Ω–æ–º—É –∏–≥—Ä–æ–∫—É. –ó–∞–ø—Ä–æ—Å —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∏–ª–∏ –±–æ–π —É–∂–µ –∏–¥—ë—Ç."
        markup = ReplyKeyboardMarkup(arena_keyboard, resize_keyboard=True)
        await context.bot.send_message(chat_id=update.effective_chat.id, text=response, reply_markup=markup)
        return ARENA_CHOOSING
    if int(getting_user_id) == update.message.from_user.id:
        response = "–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å —Å–∞–º–æ–º—É —Å–µ–±–µ!"
        markup = ReplyKeyboardMarkup(arena_keyboard, resize_keyboard=True)
        await context.bot.send_message(chat_id=update.effective_chat.id, text=response, reply_markup=markup)
        return ARENA_CHOOSING
    db.add_pending_duel(update.message.from_user.id, getting_user_id)
    message = "–ó–∞–ø—Ä–æ—Å –Ω–∞ –¥—É—ç–ª—å —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω"
    markup = ReplyKeyboardMarkup(arena_keyboard, resize_keyboard=True)
    await context.bot.send_message(chat_id=update.effective_chat.id, text=message, reply_markup=markup)
    message = f"–ò–≥—Ä–æ–∫ —Å ID {update.effective_chat.id} –≤—ã–∑—ã–≤–∞–µ—Ç –≤–∞—Å –Ω–∞ –¥—É—ç–ª—å!"
    keyboard = [
        [
            InlineKeyboardButton("–ü—Ä–∏–Ω—è—Ç—å", callback_data="accept_duel"),
            InlineKeyboardButton("–û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data="reject_duel"),
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await context.bot.send_message(chat_id=getting_user_id, text=message, reply_markup=reply_markup)
    return ARENA_CHOOSING


async def create_open_duel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    message = "–î–æ—Å—Ç—É–ø–Ω—ã–µ —á–∞—Ç—ã –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–æ–π –¥—É—ç–ª–∏: \n\n"
    chats = db.get_chat_ids()
    for chat in chats:
        message += f"{str(chat[2])}: {str(chat[1])}\n"
    message += "\n–í–≤–µ–¥–∏—Ç–µ ID —á–∞—Ç–∞, –≤ –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ!"
    await context.bot.send_message(chat_id=update.effective_chat.id, text=message, reply_markup=back_markup)
    return GET_CHAT_ID


async def get_chat_id(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    getting_chat_id = update.message.text
    if not getting_chat_id[1:].isdigit():
        response = "ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–≤—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º!"
        markup = ReplyKeyboardMarkup(arena_keyboard, resize_keyboard=True)
        await context.bot.send_message(chat_id=update.effective_chat.id, text=response, reply_markup=markup)
        return ARENA_CHOOSING
    message = "–ó–∞–ø—Ä–æ—Å –Ω–∞ –¥—É—ç–ª—å —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω"
    db.add_pending_duel(update.effective_chat.id, 0)
    markup = ReplyKeyboardMarkup(arena_keyboard, resize_keyboard=True)
    await context.bot.send_message(chat_id=update.effective_chat.id, text=message, reply_markup=markup)
    message = f"–ò–≥—Ä–æ–∫ —Å ID {update.effective_chat.id} —Å–æ–∑–¥–∞–ª –æ—Ç–∫—Ä—ã—Ç—É—é –¥—É—ç–ª—å!"
    keyboard = [
        [
            InlineKeyboardButton("–ü—Ä–∏–Ω—è—Ç—å", callback_data="accept_duel")
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await context.bot.send_message(chat_id=getting_chat_id, text=message, reply_markup=reply_markup)
    return ARENA_CHOOSING


async def inventory(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    keyboard = [['–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å'], ['–í—ã–±—Ä–∞—Ç—å –æ—Ä—É–∂–∏–µ', '–í—ã–±—Ä–∞—Ç—å –±—Ä–æ–Ω—é'], ['–ù–∞–∑–∞–¥']]
    markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    message = "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    await context.bot.send_message(chat_id=update.effective_chat.id, text=message, reply_markup=markup)
    return INVENTORY_CHOOSING


async def show_inventory(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    items = db.get_users_items(update.effective_chat.id)
    if len(items) != 0:
        text = "–í –≤–∞—à–µ–º –∏–Ω–≤–µ–Ω—Ç–æ—Ä–µ –∏–º–µ—é—Ç—Å—è:\n\n"
        for item in items:
            text += item[0] + f" ({switch_equip_type_to_russian(str(item[2]))}). –°–∏–ª–∞: {item[3]}.\n"
            if item[1] == "" or item[1] is None:
                text += "–ó–∞—á–∞—Ä–æ–≤–∞–Ω–∏–π –Ω–µ—Ç.\n\n"
            else:
                text += "–ó–∞—á–∞—Ä–æ–≤–∞–Ω–∏—è: "
                ench_names = []
                for ench in item[1].split(','):
                    ench_name = db.get_ench_name_by_id(ench, item[2])
                    ench_names.append(ench_name)
                ench_str = ", ".join(ench_names)
                text += ench_str
                text += "\n\n"
        await context.bot.send_message(chat_id=update.effective_chat.id, text=text)
    else:
        await context.bot.send_message(chat_id=update.effective_chat.id, text="–í–∞—à –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø—É—Å—Ç!")


async def weapon_choosing(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    items = db.get_users_items(update.message.from_user.id)
    message = "–í–∞—à–µ –æ—Ä—É–∂–∏–µ:\n\n"
    for item in items:
        if item[2] == 'weapon':
            message += f"ID: {item[5]}\n" \
                       f"–ù–∞–∑–≤–∞–Ω–∏–µ: {item[0]}\n" \
                       f"–°–∏–ª–∞: {item[3]}\n"
            if item[1] == "" or item[1] is None:
                message += "–ó–∞—á–∞—Ä–æ–≤–∞–Ω–∏–π –Ω–µ—Ç.\n\n"
            else:
                message += "–ó–∞—á–∞—Ä–æ–≤–∞–Ω–∏—è: "
                ench_names = []
                for ench in item[1].split(','):
                    ench_name = db.get_ench_name_by_id(ench, item[2])
                    ench_names.append(ench_name)
                ench_str = ", ".join(ench_names)
                message += ench_str
                message += "\n\n"
    message += "–í–≤–µ–¥–∏—Ç–µ ID –æ—Ä—É–∂–∏—è, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å."
    await context.bot.send_message(chat_id=update.effective_chat.id, text=message, reply_markup=back_markup)
    return WEAPON_CHOOSING


async def armor_choosing(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    items = db.get_users_items(update.message.from_user.id)
    message = "–í–∞—à–∞ –±—Ä–æ–Ω—è:\n\n"
    for item in items:
        if item[2] == 'armor':
            message += f"ID: {item[5]}\n" \
                       f"–ù–∞–∑–≤–∞–Ω–∏–µ: {item[0]}\n" \
                       f"–°–∏–ª–∞: {item[3]}\n"
            if item[1] == "" or item[1] is None:
                message += "–ó–∞—á–∞—Ä–æ–≤–∞–Ω–∏–π –Ω–µ—Ç.\n\n"
            else:
                message += "–ó–∞—á–∞—Ä–æ–≤–∞–Ω–∏—è: "
                ench_names = []
                for ench in item[1].split(','):
                    ench_name = db.get_ench_name_by_id(ench, item[2])
                    ench_names.append(ench_name)
                ench_str = ", ".join(ench_names)
                message += ench_str
                message += "\n\n"
    message += "–í–≤–µ–¥–∏—Ç–µ ID –±—Ä–æ–Ω–∏, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å."
    await context.bot.send_message(chat_id=update.effective_chat.id, text=message, reply_markup=back_markup)
    return ARMOR_CHOOSING


async def get_weapon_id(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    weapon_id = update.message.text
    db.set_weapon(update.message.from_user.id, weapon_id)
    await context.bot.send_message(chat_id=update.effective_chat.id, text=f"–í—ã –≤–∑—è–ª–∏ –æ—Ä—É–∂–∏–µ —Å ID {weapon_id}",
                                   reply_markup=back_markup)


async def get_armor_id(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    armor_id = update.message.text
    db.set_armor(update.message.from_user.id, armor_id)
    await context.bot.send_message(chat_id=update.effective_chat.id, text=f"–í—ã –≤–∑—è–ª–∏ –±—Ä–æ–Ω—é —Å ID {armor_id}",
                                   reply_markup=back_markup)


inventory_handler = ConversationHandler(
    entry_points=[CommandHandler("inventory", inventory),
                  MessageHandler(filters.Regex("^–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å$"), inventory)],
    states={
        INVENTORY_CHOOSING: [
            MessageHandler(filters.Regex("^–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å$"), show_inventory),
            MessageHandler(filters.Regex("^–í—ã–±—Ä–∞—Ç—å –æ—Ä—É–∂–∏–µ$"), weapon_choosing),
            MessageHandler(filters.Regex("^–í—ã–±—Ä–∞—Ç—å –±—Ä–æ–Ω—é$"), armor_choosing),
        ],
        WEAPON_CHOOSING: [
            MessageHandler(filters.TEXT & ~(filters.COMMAND | filters.Regex("^–ù–∞–∑–∞–¥$")), get_weapon_id),
            MessageHandler(filters.Regex("^–ù–∞–∑–∞–¥$"), inventory),
        ],
        ARMOR_CHOOSING: [
            MessageHandler(filters.TEXT & ~(filters.COMMAND | filters.Regex("^–ù–∞–∑–∞–¥$")), get_armor_id),
            MessageHandler(filters.Regex("^–ù–∞–∑–∞–¥$"), inventory),
        ],
    },
    fallbacks=[MessageHandler(filters.Regex("^–ù–∞–∑–∞–¥$"), main_menu)],
)


async def duels_physic_attack(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    duel_id = context.bot_data['duel_id' + str(update.message.from_user.id)]
    # Prevent fast double click abuse
    if int(duels_ongoing_dict[duel_id].get_attacker_player_in_game().user_id) != int(update.message.from_user.id):
        pass
    opponent_id = int(db.get_duel_opponent(duel_id, update.message.from_user.id))
    duels_ongoing_dict[duel_id].process_turn(Turn(update.message.from_user.id, TurnType.PHYSICAL_ATTACK, opponent_id))

    opponent = duels_ongoing_dict[duel_id].get_player_in_game(opponent_id)
    me = duels_ongoing_dict[duel_id].get_player_in_game(update.message.from_user.id)

    if opponent.is_stuned:
        opponent.is_stuned = False
        await context.bot.send_message(chat_id=update.message.from_user.id,
                                       text=duels_ongoing_dict[duel_id].get_visible_logs_as_str_last_turn(),
                                       reply_markup=ReplyKeyboardRemove())
        await context.bot.send_message(chat_id=opponent_id,
                                       text=duels_ongoing_dict[duel_id].get_visible_logs_as_str_last_turn(),
                                       reply_markup=ReplyKeyboardRemove())
        await context.bot.send_message(chat_id=update.message.from_user.id,
                                       text=duels_ongoing_dict[duel_id].get_visible_logs_as_str_last_turn(),
                                       reply_markup=attacks_markup)
    else:
        await context.bot.send_message(chat_id=update.message.from_user.id,
                                       text=duels_ongoing_dict[duel_id].get_visible_logs_as_str_last_turn(),
                                       reply_markup=ReplyKeyboardRemove())
        await context.bot.send_message(chat_id=opponent_id,
                                       text=duels_ongoing_dict[duel_id].get_visible_logs_as_str_last_turn(),
                                       reply_markup=attacks_markup)

    if opponent.is_dead() and me.is_dead():
        await context.bot.send_message(chat_id=update.message.from_user.id,
                                       text="–ù–∏—á—å—è! –í—ã —É–±–∏–ª–∏ –¥—Ä—É–≥ –¥—Ä—É–≥–∞...",
                                       reply_markup=back_markup)
        await context.bot.send_message(chat_id=opponent_id,
                                       text="–ù–∏—á—å—è! –í—ã —É–±–∏–ª–∏ –¥—Ä—É–≥ –¥—Ä—É–≥–∞...",
                                       reply_markup=back_markup)

        kill_duel(duel_id)

    elif opponent.is_dead():
        await context.bot.send_message(chat_id=update.message.from_user.id,
                                       text="–û–ø–ø–æ–Ω–µ–Ω—Ç –ø–∞–ª! –í—ã –ø–æ–±–µ–¥–∏–ª–∏!",
                                       reply_markup=back_markup)
        await context.bot.send_message(chat_id=opponent_id,
                                       text="–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏! –í —ç—Ç–æ—Ç —Ä–∞–∑ —Å–æ–ø–µ—Ä–Ω–∏–∫ –æ–∫–∞–∑–∞–ª—Å—è —Å–∏–ª—å–Ω–µ–µ!",
                                       reply_markup=back_markup)

        kill_duel(duel_id)

    elif me.is_dead():
        await context.bot.send_message(chat_id=update.message.from_user.id,
                                       text="–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏! –í —ç—Ç–æ—Ç —Ä–∞–∑ —Å–æ–ø–µ—Ä–Ω–∏–∫ –æ–∫–∞–∑–∞–ª—Å—è —Å–∏–ª—å–Ω–µ–µ!",
                                       reply_markup=back_markup)
        await context.bot.send_message(chat_id=opponent_id,
                                       text="–û–ø–ø–æ–Ω–µ–Ω—Ç –ø–∞–ª! –í—ã –ø–æ–±–µ–¥–∏–ª–∏!",
                                       reply_markup=back_markup)

        kill_duel(duel_id)

    return ConversationHandler.END


ABILITY_CHOOSING, CONSUMABLE_CHOOSING, ENEMY_CHOOSING = range(3)


async def duels_magic_attack(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    duel_id = context.bot_data['duel_id' + str(update.message.from_user.id)]
    if int(duels_ongoing_dict[duel_id].get_attacker_player_in_game().user_id) != int(update.message.from_user.id):
        pass
    abilities = duels_ongoing_dict[duel_id].get_possible_abilities(update.message.from_user.id)
    abilities_id_and_name = []
    for a in abilities:
        abilities_id_and_name.append((a, db.get_ability_name(a)))
    keyboard = []
    i = 0
    while i < len(abilities_id_and_name):
        if i % 3 == 0:
            keyboard.append([])
        keyboard[len(keyboard) - 1].append(abilities_id_and_name[i][1])
        i += 1
    magic_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=False)
    await context.bot.send_message(chat_id=update.message.from_user.id,
                                   text=f"–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö: ",
                                   reply_markup=magic_markup)
    return ABILITY_CHOOSING


async def duels_receive_magic_attack(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    ability_name = update.message.text
    duel_id = context.bot_data['duel_id' + str(update.message.from_user.id)]
    ability_id = db.get_ability_id_from_name(ability_name)
    opponent_id = int(db.get_duel_opponent(duel_id, update.message.from_user.id))

    opponent = duels_ongoing_dict[duel_id].get_player_in_game(opponent_id)
    me = duels_ongoing_dict[duel_id].get_player_in_game(update.message.from_user.id)

    duels_ongoing_dict[duel_id].process_turn(
        Turn(update.message.from_user.id, TurnType.MAGIC_ATTACK, opponent_id, Ability(ability_id, opponent_id)))

    if opponent.is_stuned:
        opponent.is_stuned = False
        await context.bot.send_message(chat_id=update.message.from_user.id,
                                       text=duels_ongoing_dict[duel_id].get_visible_logs_as_str_last_turn(),
                                       reply_markup=ReplyKeyboardRemove())
        await context.bot.send_message(chat_id=opponent_id,
                                       text=duels_ongoing_dict[duel_id].get_visible_logs_as_str_last_turn(),
                                       reply_markup=ReplyKeyboardRemove())
        await context.bot.send_message(chat_id=update.message.from_user.id,
                                       text=duels_ongoing_dict[duel_id].get_visible_logs_as_str_last_turn(),
                                       reply_markup=attacks_markup)
    else:
        await context.bot.send_message(chat_id=update.message.from_user.id,
                                       text=duels_ongoing_dict[duel_id].get_visible_logs_as_str_last_turn(),
                                       reply_markup=ReplyKeyboardRemove())
        await context.bot.send_message(chat_id=opponent_id,
                                       text=duels_ongoing_dict[duel_id].get_visible_logs_as_str_last_turn(),
                                       reply_markup=attacks_markup)

    if opponent.is_dead() and me.is_dead():
        await context.bot.send_message(chat_id=update.message.from_user.id,
                                       text="–ù–∏—á—å—è! –í—ã —É–±–∏–ª–∏ –¥—Ä—É–≥ –¥—Ä—É–≥–∞...",
                                       reply_markup=back_markup)
        await context.bot.send_message(chat_id=opponent_id,
                                       text="–ù–∏—á—å—è! –í—ã —É–±–∏–ª–∏ –¥—Ä—É–≥ –¥—Ä—É–≥–∞...",
                                       reply_markup=back_markup)

        kill_duel(duel_id)

    elif opponent.is_dead():
        await context.bot.send_message(chat_id=update.message.from_user.id,
                                       text="–û–ø–ø–æ–Ω–µ–Ω—Ç –ø–∞–ª! –í—ã –ø–æ–±–µ–¥–∏–ª–∏!",
                                       reply_markup=back_markup)
        await context.bot.send_message(chat_id=opponent_id,
                                       text="–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏! –í —ç—Ç–æ—Ç —Ä–∞–∑ —Å–æ–ø–µ—Ä–Ω–∏–∫ –æ–∫–∞–∑–∞–ª—Å—è —Å–∏–ª—å–Ω–µ–µ!",
                                       reply_markup=back_markup)

        kill_duel(duel_id)

    elif me.is_dead():
        await context.bot.send_message(chat_id=update.message.from_user.id,
                                       text="–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏! –í —ç—Ç–æ—Ç —Ä–∞–∑ —Å–æ–ø–µ—Ä–Ω–∏–∫ –æ–∫–∞–∑–∞–ª—Å—è —Å–∏–ª—å–Ω–µ–µ!",
                                       reply_markup=back_markup)
        await context.bot.send_message(chat_id=opponent_id,
                                       text="–û–ø–ø–æ–Ω–µ–Ω—Ç –ø–∞–ª! –í—ã –ø–æ–±–µ–¥–∏–ª–∏!",
                                       reply_markup=back_markup)

        kill_duel(duel_id)

    return ConversationHandler.END


async def duels_choose_consumable_to_use(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    duel_id = context.bot_data['duel_id' + str(update.message.from_user.id)]
    if int(duels_ongoing_dict[duel_id].get_attacker_player_in_game().user_id) != int(update.message.from_user.id):
        pass
    consumables_list_ids = duels_ongoing_dict[duel_id].get_possible_consumables(update.message.from_user.id)
    consumables_id_and_name = []
    for c in consumables_list_ids:
        consumables_id_and_name.append((c, db.get_consumable_main_info(c)[0]))
    keyboard = []
    i = 0
    while i < len(consumables_id_and_name):
        if i % 3 == 0:
            keyboard.append([])
        keyboard[len(keyboard) - 1].append(consumables_id_and_name[i][1])
        i += 1
    consumable_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=False)
    print(len(consumables_id_and_name))
    await context.bot.send_message(chat_id=update.message.from_user.id,
                                   text=f"–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö: ",
                                   reply_markup=consumable_markup)
    return CONSUMABLE_CHOOSING


async def duels_apply_consumable_effect(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    consumable_name = update.message.text
    duel_id = context.bot_data['duel_id' + str(update.message.from_user.id)]
    consumable_id = db.get_consumable_id_from_name(consumable_name)
    opponent_id = int(db.get_duel_opponent(duel_id, update.message.from_user.id))

    opponent = duels_ongoing_dict[duel_id].get_player_in_game(opponent_id)
    me = duels_ongoing_dict[duel_id].get_player_in_game(update.message.from_user.id)

    duels_ongoing_dict[duel_id].process_turn(
        Turn(update.message.from_user.id, TurnType.CONSUME, opponent_id,
             None, Consumable(consumable_id, opponent_id)))

    if opponent.is_stuned:
        opponent.is_stuned = False
        await context.bot.send_message(chat_id=update.message.from_user.id,
                                       text=duels_ongoing_dict[duel_id].get_visible_logs_as_str_last_turn(),
                                       reply_markup=ReplyKeyboardRemove())
        await context.bot.send_message(chat_id=opponent_id,
                                       text=duels_ongoing_dict[duel_id].get_visible_logs_as_str_last_turn(),
                                       reply_markup=ReplyKeyboardRemove())
        await context.bot.send_message(chat_id=update.message.from_user.id,
                                       text=duels_ongoing_dict[duel_id].get_visible_logs_as_str_last_turn(),
                                       reply_markup=attacks_markup)
    else:
        await context.bot.send_message(chat_id=update.message.from_user.id,
                                       text=duels_ongoing_dict[duel_id].get_visible_logs_as_str_last_turn(),
                                       reply_markup=ReplyKeyboardRemove())
        await context.bot.send_message(chat_id=opponent_id,
                                       text=duels_ongoing_dict[duel_id].get_visible_logs_as_str_last_turn(),
                                       reply_markup=attacks_markup)

    if opponent.is_dead() and me.is_dead():
        await context.bot.send_message(chat_id=update.message.from_user.id,
                                       text="–ù–∏—á—å—è! –í—ã —É–±–∏–ª–∏ –¥—Ä—É–≥ –¥—Ä—É–≥–∞...",
                                       reply_markup=back_markup)
        await context.bot.send_message(chat_id=opponent_id,
                                       text="–ù–∏—á—å—è! –í—ã —É–±–∏–ª–∏ –¥—Ä—É–≥ –¥—Ä—É–≥–∞...",
                                       reply_markup=back_markup)

        kill_duel(duel_id)

    elif opponent.is_dead():
        await context.bot.send_message(chat_id=update.message.from_user.id,
                                       text="–û–ø–ø–æ–Ω–µ–Ω—Ç –ø–∞–ª! –í—ã –ø–æ–±–µ–¥–∏–ª–∏!",
                                       reply_markup=back_markup)
        await context.bot.send_message(chat_id=opponent_id,
                                       text="–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏! –í —ç—Ç–æ—Ç —Ä–∞–∑ —Å–æ–ø–µ—Ä–Ω–∏–∫ –æ–∫–∞–∑–∞–ª—Å—è —Å–∏–ª—å–Ω–µ–µ!",
                                       reply_markup=back_markup)

        kill_duel(duel_id)

    elif me.is_dead():
        await context.bot.send_message(chat_id=update.message.from_user.id,
                                       text="–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏! –í —ç—Ç–æ—Ç —Ä–∞–∑ —Å–æ–ø–µ—Ä–Ω–∏–∫ –æ–∫–∞–∑–∞–ª—Å—è —Å–∏–ª—å–Ω–µ–µ!",
                                       reply_markup=back_markup)
        await context.bot.send_message(chat_id=opponent_id,
                                       text="–û–ø–ø–æ–Ω–µ–Ω—Ç –ø–∞–ª! –í—ã –ø–æ–±–µ–¥–∏–ª–∏!",
                                       reply_markup=back_markup)

        kill_duel(duel_id)

    return ConversationHandler.END


async def alone_tasks_receive_small_assignment(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user_id = update.message.from_user.id
    task_info = db.small_task_info_for_user(user_id)
    task_id = task_info[0]
    exp_reward = task_info[1]
    item_reward_id = task_info[2]
    dange_id = task_info[3]
    dange_obj: SoloDange = SoloDange(dange_id, user_id)
    init_solo_dange(dange_obj)
    await context.bot.send_message(chat_id=user_id,
                                   text=f"–ü—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ –¥–∞–Ω–∂–∞ –∏–≥—Ä–æ–∫–æ–º {db.get_user_nick(user_id)} –Ω–∞—á–∞–ª–æ—Å—å! –í–∞—à —Ö–æ–¥!",
                                   reply_markup=solo_danges_attacks_markup)
    return SOLO_DANGE_ATTACKS


async def alone_tasks_receive_medium_assignment(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user_id = update.message.from_user.id
    task_info = db.medium_task_info_for_user(user_id)
    task_id = task_info[0]
    exp_reward = task_info[1]
    item_reward_id = task_info[2]
    dange_id = task_info[3]
    dange_obj: SoloDange = SoloDange(dange_id, user_id)
    init_solo_dange(dange_obj)
    await context.bot.send_message(chat_id=user_id,
                                   text=f"–ü—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ –¥–∞–Ω–∂–∞ –∏–≥—Ä–æ–∫–æ–º {db.get_user_nick(user_id)} –Ω–∞—á–∞–ª–æ—Å—å! –í–∞—à —Ö–æ–¥!",
                                   reply_markup=solo_danges_attacks_markup)
    return SOLO_DANGE_ATTACKS


async def alone_tasks_receive_class_license(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user_id = update.message.from_user.id
    task_info = db.class_license_task_info_for_user(user_id)
    task_id = task_info[0]
    exp_reward = task_info[1]
    item_reward_id = task_info[2]
    dange_id = task_info[3]
    dange_obj: SoloDange = SoloDange(dange_id, user_id)
    init_solo_dange(dange_obj)
    await context.bot.send_message(chat_id=user_id,
                                   text=f"–ü—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ –¥–∞–Ω–∂–∞ –∏–≥—Ä–æ–∫–æ–º {db.get_user_nick(user_id)} –Ω–∞—á–∞–ª–æ—Å—å! –í–∞—à —Ö–æ–¥!",
                                   reply_markup=solo_danges_attacks_markup)
    return SOLO_DANGE_ATTACKS


async def solo_dange_physical_attack(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user_id = update.message.from_user.id
    dange: SoloDange = get_dange_by_user_id(user_id)
    if dange == None:
        logging.error("No active dange!!!")
    # TODO:


async def solo_dange_magic_attack(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    pass


async def solo_dange_consume(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    pass


async def solo_dange_receive_physical_attack(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    pass


async def solo_dange_receive_magic_attack(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    pass


async def solo_dange_receive_consume(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    pass


solo_dange_physical_attack_handler = ConversationHandler(
    entry_points=[MessageHandler(filters.Regex("^–§–∏–∑–∏—á–µ—Å–∫–∞—è –∞—Ç–∞–∫–∞!$"), solo_dange_physical_attack)],
    states={
        ENEMY_CHOOSING: [
            MessageHandler(
                filters.TEXT & ~(filters.COMMAND | filters.Regex("^–ù–∞–∑–∞–¥$")), solo_dange_receive_physical_attack, )
        ]
    },
    fallbacks=[MessageHandler(filters.Regex("^–ù–∞–∑–∞–¥$"), main_menu)],
)

solo_dange_magic_attack_handler = ConversationHandler(
    entry_points=[MessageHandler(filters.Regex("^–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å!$"), solo_dange_magic_attack)],
    states={
        ENEMY_CHOOSING: [
            MessageHandler(
                filters.TEXT & ~(filters.COMMAND | filters.Regex("^–ù–∞–∑–∞–¥$")), solo_dange_receive_magic_attack, )
        ]
    },
    fallbacks=[MessageHandler(filters.Regex("^–ù–∞–∑–∞–¥$"), main_menu)],
)

solo_dange_consume_handler = ConversationHandler(
    entry_points=[MessageHandler(filters.Regex("^–§–∏–∑–∏—á–µ—Å–∫–∞—è –∞—Ç–∞–∫–∞!$"), solo_dange_consume)],
    states={
        ENEMY_CHOOSING: [
            MessageHandler(
                filters.TEXT & ~(filters.COMMAND | filters.Regex("^–ù–∞–∑–∞–¥$")), solo_dange_receive_consume, )
        ]
    },
    fallbacks=[MessageHandler(filters.Regex("^–ù–∞–∑–∞–¥$"), main_menu)],
)


magic_handler = ConversationHandler(
    entry_points=[MessageHandler(filters.Regex("^–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å$"), duels_magic_attack)],
    states={
        ABILITY_CHOOSING: [
            MessageHandler(
                filters.TEXT & ~(filters.COMMAND | filters.Regex("^–ù–∞–∑–∞–¥$")), duels_receive_magic_attack, )
        ]
    },
    fallbacks=[MessageHandler(filters.Regex("^–ù–∞–∑–∞–¥$"), main_menu)],
)

consumable_handler = ConversationHandler(
    entry_points=[MessageHandler(filters.Regex("^–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–µ–¥–º–µ—Ç!$"), solo_dange_physical_attack)],
    states={
        CONSUMABLE_CHOOSING: [
            MessageHandler(
                filters.TEXT & ~(filters.COMMAND | filters.Regex("^–ù–∞–∑–∞–¥$")), duels_apply_consumable_effect, )
        ]
    },
    fallbacks=[MessageHandler(filters.Regex("^–ù–∞–∑–∞–¥$"), main_menu)],
)

game_handler = ConversationHandler(
    entry_points=[CommandHandler("game", game_menu),
                  MessageHandler(filters.Regex("^–ò–≥—Ä–∞$"), game_menu)],
    states={
        CLASS_CHOOSING: [
            MessageHandler(filters.Regex("^–†—ã—Ü–∞—Ä—å$|^–ú–∞–≥$|^–õ—É—á–Ω–∏–∫$|^–û—Ö–æ—Ç–Ω–∏–∫$"), class_choosing),
        ],
        WHERE_CHOOSING: [
            MessageHandler(filters.Regex("^–î–æ–º –ø–æ—Ä—É—á–µ–Ω–∏–π$"), assignments),
            MessageHandler(filters.Regex("^–•—Ä–∞–º –•—Ä–æ–Ω–æ—Å–∞$"), chronos),
            MessageHandler(filters.Regex("^–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è$"), lab),
            MessageHandler(filters.Regex("^–î–æ–º –≥–∏–ª—å–¥–∏–π$"), guild_house),
            MessageHandler(filters.Regex("^–ö—É–∑–Ω–∏—Ü–∞$"), forge),
            MessageHandler(filters.Regex("^–ê—Ä–µ–Ω–∞$"), arena),
        ],
        CHRONOS_CHOOSING: [
            MessageHandler(filters.Regex("^–£–ª—É—á—à–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞$"), upgrade_champ),
            MessageHandler(filters.Regex("^–ò–∑–º–µ–Ω–∏—Ç—å –ø–æ–¥–∫–ª–∞—Å—Å$"), change_subclass),
            MessageHandler(filters.Regex("^–ù–∞–∑–∞–¥$"), game_menu),
        ],
        SUBCLASS_CHOOSING: [
            MessageHandler(filters.Regex(
                "^–õ–∞—Ç–Ω–∏–∫$|^–ü–∞–ª–∞–¥–∏–Ω$|^–ß–µ—Ä–Ω–æ–∫–Ω–∏–∂–Ω–∏–∫$|^–≠–ª–µ–º–µ–Ω—Ç–∞–ª—å$|^–ê–Ω–≥–µ–ª$|^–ê—Ä–±–∞–ª–µ—Ç—á–∏–∫$|^–®–∞–º–∞–Ω$|^–ò–Ω–∂–µ–Ω–µ—Ä$|^–£–±–∏–π—Ü–∞$"
                "|^–®–∏–Ω–æ–±–∏$"),
                subclass_choosing),
            MessageHandler(filters.Regex("^–ù–∞–∑–∞–¥$"), chronos),
        ],
        TASKS: [
            MessageHandler(filters.Regex("^–í –æ–¥–∏–Ω–æ—á–∫—É$"), alone_tasks),
            MessageHandler(filters.Regex("^–° –¥—Ä—É–∑—å—è–º–∏$"), multiplayer_tasks),
            MessageHandler(filters.Regex("^–ù–∞–∑–∞–¥$"), game_menu),
        ],
        ALONE_TASK_CHOOSING: [
            MessageHandler(filters.Regex("^–ú–µ–ª–∫–æ–µ –ø–æ—Ä—É—á–µ–Ω–∏–µ$"), alone_tasks_receive_small_assignment),
            MessageHandler(filters.Regex("^–°—Ä–µ–¥–Ω–µ–µ –ø–æ—Ä—É—á–µ–Ω–∏–µ$"), alone_tasks_receive_medium_assignment),
            MessageHandler(filters.Regex("^–ö–ª–∞—Å—Å–æ–≤–∞—è –ª–∏—Ü–µ–Ω–∑–∏—è$"), alone_tasks_receive_class_license),
            MessageHandler(filters.Regex("^–ù–∞–∑–∞–¥$"), assignments),
        ],
        MULTIPLAYER_TASK_CHOOSING: [
            MessageHandler(filters.Regex("^–î–µ–ª–æ –æ—Å–æ–±–æ–π –≤–∞–∂–Ω–æ—Å—Ç–∏$"), get_special_task),
            MessageHandler(filters.Regex("^–°–±–æ—Ä —Ä–µ—Å—É—Ä—Å–æ–≤$"), get_random_task),
            MessageHandler(filters.Regex("^–ù–∞–∑–∞–¥$"), assignments),
        ],
        ARENA_CHOOSING: [
            MessageHandler(filters.Regex("^–í—ã–∑–≤–∞—Ç—å –Ω–∞ –¥—É—ç–ª—å$"), challenge_to_duel),
            MessageHandler(filters.Regex("^–°–æ–∑–¥–∞—Ç—å –æ—Ç–∫—Ä—ã—Ç—É—é –¥—É—ç–ª—å$"), create_open_duel),
            MessageHandler(filters.Regex("^–ù–∞–∑–∞–¥$"), game_menu),
        ],
        GET_USER_TO_DUEL_ID: [
            MessageHandler(filters.TEXT & ~(filters.COMMAND | filters.Regex("^–ù–∞–∑–∞–¥$")), get_user_duel_id),
            MessageHandler(filters.Regex("^–ù–∞–∑–∞–¥$"), arena),
        ],
        GET_CHAT_ID: [
            MessageHandler(filters.TEXT & ~(filters.COMMAND | filters.Regex("^–ù–∞–∑–∞–¥$")), get_chat_id),
            MessageHandler(filters.Regex("^–ù–∞–∑–∞–¥$"), arena),
        ],
        GET_USER_FOR_SPECIAL_MULTIPLAYER_ID: [
            MessageHandler(filters.TEXT & ~(filters.COMMAND | filters.Regex("^–ù–∞–∑–∞–¥$")),
                           get_ids_for_special_multiplayer_task),
            MessageHandler(filters.Regex("^–ù–∞–∑–∞–¥$"), assignments),
        ],
        GET_USER_FOR_RANDOM_MULTIPLAYER_ID: [
            MessageHandler(filters.TEXT & ~(filters.COMMAND | filters.Regex("^–ù–∞–∑–∞–¥$")),
                           get_ids_for_random_multiplayer_task),
            MessageHandler(filters.Regex("^–ù–∞–∑–∞–¥$"), assignments),
        ],
        LAB_CHOOSING: [
            MessageHandler(filters.Regex("^–°–æ–∑–¥–∞—Ç—å —Ä–∞—Å—Ö–æ–¥–Ω–∏–∫–∏$"), craft_choosing),
            MessageHandler(filters.Regex("^–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–µ—Å—É—Ä—Å—ã$"), show_items),
            MessageHandler(filters.Regex("^–ù–∞–∑–∞–¥$"), game_menu),
        ],
        GETTING_ITEM_ID: [
            MessageHandler(filters.TEXT & ~(filters.COMMAND | filters.Regex("^–ù–∞–∑–∞–¥$")), craft),
            MessageHandler(filters.Regex("^–ù–∞–∑–∞–¥$"), lab),
        ],
        GUILD_CHOOSING: [
            MessageHandler(filters.Regex("^–ó–∞–ø—Ä–æ—Å–∏—Ç—å —Ä–µ—Å—É—Ä—Å—ã$"), res_request),
            MessageHandler(filters.Regex("^–ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Ä–µ—Å—É—Ä—Å–∞–º–∏$"), res_share),
            MessageHandler(filters.Regex("^–ù–∞–∑–∞–¥$"), game_menu),
        ],
        GUILD_REQUEST: [
            MessageHandler(filters.TEXT & ~(filters.COMMAND | filters.Regex("^–ù–∞–∑–∞–¥$")), create_res_request),
            MessageHandler(filters.Regex("^–ù–∞–∑–∞–¥$"), guild_house),
        ],
        GUILD_ID_GETTING: [
            MessageHandler(filters.TEXT & ~(filters.COMMAND | filters.Regex("^–ù–∞–∑–∞–¥$")), request_id_getting),
            MessageHandler(filters.Regex("^–ù–∞–∑–∞–¥$"), guild_house),
        ],
        FORGE_CHOOSING: [
            MessageHandler(filters.Regex("^–û—Ä—É–∂–∏–µ$"), weapon_creating),
            MessageHandler(filters.Regex("^–ë—Ä–æ–Ω—è$"), armor_creating),
            MessageHandler(filters.Regex("^–ß–∞—Ä—ã –Ω–∞ –æ—Ä—É–∂–∏–µ"), weapon_enchant),
            MessageHandler(filters.Regex("^–ß–∞—Ä—ã –Ω–∞ –±—Ä–æ–Ω—é"), armor_enchant),
            MessageHandler(filters.Regex("^–ù–∞–∑–∞–¥$"), game_menu),
        ],
        ITEM_INPUT: [
            MessageHandler(filters.TEXT & ~(filters.COMMAND | filters.Regex("^–ù–∞–∑–∞–¥$")), get_item_id),
            MessageHandler(filters.Regex("^–ù–∞–∑–∞–¥$"), forge),
        ],
        WEAPON_ID_FOR_ENCHANT: [
            MessageHandler(filters.TEXT & ~(filters.COMMAND | filters.Regex("^–ù–∞–∑–∞–¥$")), get_weapon_id_to_enchant),
            MessageHandler(filters.Regex("^–ù–∞–∑–∞–¥$"), forge),
        ],
        ARMOR_ID_FOR_ENCHANT: [
            MessageHandler(filters.TEXT & ~(filters.COMMAND | filters.Regex("^–ù–∞–∑–∞–¥$")), get_armor_id_to_enchant),
            MessageHandler(filters.Regex("^–ù–∞–∑–∞–¥$"), forge),
        ],
    },
    fallbacks=[MessageHandler(filters.Regex("^–ù–∞–∑–∞–¥$"), main_menu)],
)
