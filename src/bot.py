from datebase import *
import os
from telegram import ReplyKeyboardMarkup, ReplyKeyboardRemove, Update, InputMediaPhoto
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    ContextTypes,
    ConversationHandler,
    MessageHandler,
    filters,
)
from customization import custom_name_handler, avatar_handler
from common_func import start, main_menu, profile, help_me, upgrade, fight, danet, netda, meme

CHOOSING, TYPING_REPLY, TYPING_CHOICE = range(3)
CHOOSING_AVATAR, TYPING_HAIR, TYPING_FACE, TYPING_BODY, CUSTOM_AVATAR_CHOICE = range(5)

CLASS_CHOOSING, SUBMIT_CLASS, WHERE_CHOOSING = range(3)


async def del_keyboard(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await context.bot.send_message(chat_id=update.effective_chat.id, text='–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —É–¥–∞–ª–µ–Ω–∞! (–Æ—Ä–∞ –ø–∏–¥–æ—Ä)', reply_markup=ReplyKeyboardRemove())

async def game(update: Update, context: ContextTypes.DEFAULT_TYPE):
    con = create_connection('../db/database.db')
    user_id = update.message.from_user.id
    request = f"SELECT game_class FROM users WHERE id={user_id}"
    user_class = execute_read_query(con, request)
    con.close()
    if user_class[0][0] is None:
        await context.bot.send_photo(chat_id=update.effective_chat.id, photo=open(os.path.abspath('../res/locations/gate.png'), 'rb'),
                                     caption="–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –í–µ–ª–∏–∫—É—é –ò–º–ø–µ—Ä–∏—é. –ï–µ –≤—ã–±—Ä–∞–ª–∏ –≤—ã, –∏–ª–∏ –µ–µ –≤—ã–±—Ä–∞–ª–∏ –∑–∞ –≤–∞—Å" \
                                             " ‚Äî —ç—Ç–æ –ª—É—á—à–µ–µ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–æ –∏–∑ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è.\n\n –°–µ–π—á–∞—Å –í–∞–º –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –ª–∏—Ü–µ–Ω–∑–∏—é –Ω–∞ —Ä–æ–ª—å –∫–ª–∞—Å—Å–∞.")
        classes_description = "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–ª–∞—Å—Å—ã:\n\n" \
                              "üõ° –†—ã—Ü–∞—Ä—å ‚Äî –≤—ã—Å–æ–∫–∞—è –∑–∞—â–∏—Ç–∞ –∏ —Å—Ä–µ–¥–Ω—è—è –∞—Ç–∞–∫–∞. –ù–æ—Å–∏—Ç –Ω–µ–±–æ–ª—å—à–æ–π —â–∏—Ç –∏ –º–µ—á.\n" \
                              "üßô –ú–∞–≥ ‚Äî –≤—ã—Å–æ–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞, –∞—Ç–∞–∫–∞ –Ω–∏–∂–µ —Å—Ä–µ–¥–Ω–µ–≥–æ, –Ω–∏–∑–∫–∞—è –∑–∞—â–∏—Ç–∞. –ù–æ—Å–∏—Ç –ø–æ—Å–æ—Ö.\n" \
                              "üèπ –õ—É—á–Ω–∏–∫ ‚Äî –≤—ã—Å–æ–∫–∏–π –∫–æ–Ω—Ç—Ä–æ–ª—å, –∞—Ç–∞–∫–∞ –Ω–∏–∂–µ —Å—Ä–µ–¥–Ω–µ–≥–æ, –Ω–∏–∑–∫–∞—è –∑–∞—â–∏—Ç–∞. –ù–æ—Å–∏—Ç –ª—É–∫ (–≤–∞—É).\n" \
                              "üó° –û—Ö–æ—Ç–Ω–∏–∫ ‚Äî –≤—ã—Å–æ–∫–∞—è –∞—Ç–∞–∫–∞, –∑–∞—â–∏—Ç–∞ –Ω–∏–∂–µ —Å—Ä–µ–¥–Ω–µ–≥–æ, –Ω–æ—Å–∏—Ç –∫–ª–∏–Ω–æ–∫.\n\n" \
                              "–ß—Ç–æ –≤—ã–±–µ—Ä–µ—Ç–µ?"
        class_keyboard = [["–†—ã—Ü–∞—Ä—å", "–ú–∞–≥", "–õ—É—á–Ω–∏–∫", "–û—Ö–æ—Ç–Ω–∏–∫"], ["–û—Ç–º–µ–Ω–∞"]]
        markup = ReplyKeyboardMarkup(class_keyboard, one_time_keyboard=True)
        await context.bot.send_message(chat_id=update.effective_chat.id, text=classes_description, reply_markup=markup)
        return CLASS_CHOOSING
    else:
        where_keyboard = [["–î–æ–º –ø–æ—Ä—É—á–µ–Ω–∏–π", "–•—Ä–∞–º –•—Ä–æ–Ω–æ—Å–∞", "–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è", "–î–æ–º –≥–∏–ª—å–¥–∏–π"],
                          ['–ö—É–∑–Ω–∏—Ü–∞', '–†—ã–Ω–æ–∫', '–ê—Ä–µ–Ω–∞', '–í–µ–ª–∏–∫–∞—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∞'], ["–û—Ç–º–µ–Ω–∞"]]
        markup = ReplyKeyboardMarkup(where_keyboard, one_time_keyboard=True)
        message = '–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º! –ö—É–¥–∞ –æ—Ç–ø—Ä–∞–≤–∏–º—Å—è?'
        await context.bot.send_message(chat_id=update.effective_chat.id, text=message, reply_markup=markup)
        return WHERE_CHOOSING


async def class_choosing(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    user_id = update.message.from_user.id
    context.user_data["choice"] = text
    print(text)
    inserter('game_class', text, user_id)
    message = f'–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–∏–ª–∏ –ª–∏—Ü–µ–Ω–∑–∏—é –Ω–∞ —Ä–æ–ª—å "{text}".\n\n' \
              "–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –≤–∞–º –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã –≤—Å–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ —Å–ª—É–∂–∏—Ç–µ–ª—è –∏–º–ø–µ—Ä–∏–∏, " \
              "–æ–¥–Ω–∞–∫–æ –Ω–µ —Ä–∞—Å—Å—Ç—Ä–∞–∏–≤–∞–π—Ç–µ—Å—å, –≤–∞–º –±—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã –Ω–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø–æ –º–µ—Ä–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª–µ–¥—É—é—â–∏—Ö —Ä–∞–Ω–≥–æ–≤. " \
              "–í–∞–º –ø—Ä–µ–¥—Å—Ç–æ–∏—Ç –ø—Ä–æ–π—Ç–∏ –º–Ω–æ–≥–æ –∏—Å–ø—ã—Ç–∞–Ω–∏–π –∏ –±–∏—Ç–≤, –Ω–æ –º—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ –≤—ã —Å–º–æ–∂–µ—Ç–µ –ø—Ä–µ–æ–¥–æ–ª–µ—Ç—å –≤—Å–µ —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏" \
              " –∏ —Å—Ç–∞—Ç—å –æ–¥–Ω–∏–º –∏–∑ –ª—É—á—à–∏—Ö –≤ –Ω–∞—à–µ–π –∏–º–ø–µ—Ä–∏–∏. –ñ–µ–ª–∞–µ–º –í–∞–º —É–¥–∞—á–∏!"
    await context.bot.send_message(chat_id=update.effective_chat.id, text=message, reply_markup=ReplyKeyboardRemove())
    where_keyboard = [["–î–æ–º –ø–æ—Ä—É—á–µ–Ω–∏–π", "–•—Ä–∞–º –•—Ä–æ–Ω–æ—Å–∞", "–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è", "–î–æ–º –≥–∏–ª—å–¥–∏–π"],
                      ['–ö—É–∑–Ω–∏—Ü–∞', '–†—ã–Ω–æ–∫', '–ê—Ä–µ–Ω–∞', '–í–µ–ª–∏–∫–∞—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∞'], ["–û—Ç–º–µ–Ω–∞"]]
    markup = ReplyKeyboardMarkup(where_keyboard, one_time_keyboard=True)
    message = '–ö—É–¥–∞ –æ—Ç–ø—Ä–∞–≤–∏–º—Å—è?'
    await context.bot.send_message(chat_id=update.effective_chat.id, text=message, reply_markup=markup)
    return WHERE_CHOOSING


async def assignments(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message = '–í—ã –ø–æ–¥—Ö–æ–¥–∏—Ç–µ –∫ –Ω–µ–±–æ–ª—å—à–æ–º—É –∑–¥–∞–Ω–∏—é —Å –≤—ã–≤–µ—Å–∫–æ–π "–î–æ–º –ø–æ—Ä—É—á–µ–Ω–∏–π". ' \
              '–ü—Ä–∏ –≤—Ö–æ–¥–µ –í—ã –∑–∞–º–µ—á–∞–µ—Ç–µ, —á—Ç–æ –Ω–∞ —Å—Ç–µ–Ω–∞—Ö –≤–∏—Å—è—Ç –¥–æ—Å–∫–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–π —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –∑–∞–¥–∞–Ω–∏—è–º–∏.\n' \
              '–ú–æ–∂–µ—Ç –∏ –ø–æ–ª—É—á–∏—Ç—Å—è –Ω–∞–π—Ç–∏, —á—Ç–æ-—Ç–æ –í–∞–º –ø–æ –¥—É—à–µ...'
    await context.bot.send_message(chat_id=update.effective_chat.id, text=message)


async def game_cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message = " –î–æ –≤—Å—Ç—Ä–µ—á–∏! –ú—ã –±—É–¥–µ–º –∂–¥–∞—Ç—å –í–∞—Å –≤ –ò–º–ø–µ—Ä–∏–∏!"
    await context.bot.send_message(chat_id=update.effective_chat.id, text=message, reply_markup=ReplyKeyboardRemove())
    return ConversationHandler.END


if __name__ == '__main__':
    token_file = open("../tokens/tg_app_token.txt", "r")
    application = ApplicationBuilder().token(token_file.read()).build()
    token_file.close()
    class_handler = ConversationHandler(
        entry_points=[CommandHandler("game", game)],
        states={
            CLASS_CHOOSING: [
                MessageHandler(filters.Regex("^–†—ã—Ü–∞—Ä—å$|^–ú–∞–≥$|^–õ—É—á–Ω–∏–∫$|^–û—Ö–æ—Ç–Ω–∏–∫$"), class_choosing),
            ],
            WHERE_CHOOSING: [
                MessageHandler(filters.Regex("^–î–æ–º –ø–æ—Ä—É—á–µ–Ω–∏–π$"), assignments),
                #  –°—é–¥–∞ –¥–æ–±–∞–≤–∏–º –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ª–æ–∫–∞—Ü–∏–∏
            ],
        },
        fallbacks=[MessageHandler(filters.Regex("^–û—Ç–º–µ–Ω–∞$"), game_cancel)],
    )
    application.add_handler(class_handler)
    application.add_handler(CommandHandler('start', start))
    application.add_handler(CommandHandler('help', help_me))
    application.add_handler(CommandHandler('game', game))
    application.add_handler(custom_name_handler)
    application.add_handler(avatar_handler)
    application.add_handler(CommandHandler('upgrade', upgrade))
    application.add_handler(MessageHandler(filters.Regex("^–î–∞$|^–¥–∞$"), danet))
    application.add_handler(MessageHandler(filters.Regex("^–ù–µ—Ç$|^–Ω–µ—Ç$"), netda))
    application.add_handler(CommandHandler('meme', meme))
    application.add_handler(CommandHandler('del', del_keyboard))
    application.add_handler(CommandHandler('menu', main_menu))
    application.add_handler(CommandHandler('fight', fight))
    application.add_handler(CommandHandler('profile', profile))
    application.run_polling()
