import os

from telegram import ReplyKeyboardMarkup, ReplyKeyboardRemove, Update
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    ContextTypes,
    ConversationHandler,
    MessageHandler,
    filters,
)

from common_func import start, main_menu, profile, help_me, upgrade, fight, danet, netda, meme, del_keyboard, \
    is_available
from customization import custom_name_handler, avatar_handler
from admin import admin_handler
from database import *

CLASS_CHOOSING, SUBMIT_CLASS, WHERE_CHOOSING, CHRONOS_CHOOSING, SUBCLASS_CHOOSING, TASKS = range(6)


async def game(update: Update, context: ContextTypes.DEFAULT_TYPE):
    con = create_connection('../db/database.db')
    user_id = update.message.from_user.id
    request = f"SELECT game_class FROM users WHERE id={user_id}"
    user_class = execute_read_query(con, request)
    con.close()
    if user_class[0][0] is None:
        await context.bot.send_photo(chat_id=update.effective_chat.id,
                                     photo=open(os.path.abspath('../res/locations/gate.png'), 'rb'),
                                     caption="–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –í–µ–ª–∏–∫—É—é –ò–º–ø–µ—Ä–∏—é. –ï–µ –≤—ã–±—Ä–∞–ª–∏ –≤—ã, –∏–ª–∏ –µ–µ –≤—ã–±—Ä–∞–ª–∏ –∑–∞ –≤–∞—Å" \
                                             "‚Äî —ç—Ç–æ –ª—É—á—à–µ–µ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–æ –∏–∑ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è.\n\n –°–µ–π—á–∞—Å –í–∞–º –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å "
                                             "–ª–∏—Ü–µ–Ω–∑–∏—é –Ω–∞ —Ä–æ–ª—å –∫–ª–∞—Å—Å–∞.")
        classes_description = "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–ª–∞—Å—Å—ã:\n\n" \
                              "üõ° –†—ã—Ü–∞—Ä—å ‚Äî –≤—ã—Å–æ–∫–∞—è –∑–∞—â–∏—Ç–∞ –∏ —Å—Ä–µ–¥–Ω—è—è –∞—Ç–∞–∫–∞. –ù–æ—Å–∏—Ç –Ω–µ–±–æ–ª—å—à–æ–π —â–∏—Ç –∏ –º–µ—á.\n" \
                              "üßô –ú–∞–≥ ‚Äî –≤—ã—Å–æ–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞, –∞—Ç–∞–∫–∞ –Ω–∏–∂–µ —Å—Ä–µ–¥–Ω–µ–≥–æ, –Ω–∏–∑–∫–∞—è –∑–∞—â–∏—Ç–∞. –ù–æ—Å–∏—Ç –ø–æ—Å–æ—Ö.\n" \
                              "üèπ –õ—É—á–Ω–∏–∫ ‚Äî –≤—ã—Å–æ–∫–∏–π –∫–æ–Ω—Ç—Ä–æ–ª—å, –∞—Ç–∞–∫–∞ –Ω–∏–∂–µ —Å—Ä–µ–¥–Ω–µ–≥–æ, –Ω–∏–∑–∫–∞—è –∑–∞—â–∏—Ç–∞. –ù–æ—Å–∏—Ç –ª—É–∫ (–≤–∞—É).\n" \
                              "üó° –û—Ö–æ—Ç–Ω–∏–∫ ‚Äî –≤—ã—Å–æ–∫–∞—è –∞—Ç–∞–∫–∞, –∑–∞—â–∏—Ç–∞ –Ω–∏–∂–µ —Å—Ä–µ–¥–Ω–µ–≥–æ, –Ω–æ—Å–∏—Ç –∫–ª–∏–Ω–æ–∫.\n\n" \
                              "–ß—Ç–æ –≤—ã–±–µ—Ä–µ—Ç–µ?"
        class_keyboard = [["–†—ã—Ü–∞—Ä—å", "–ú–∞–≥", "–õ—É—á–Ω–∏–∫", "–û—Ö–æ—Ç–Ω–∏–∫"], ["–û—Ç–º–µ–Ω–∞"]]
        markup = ReplyKeyboardMarkup(class_keyboard, one_time_keyboard=True)
        await context.bot.send_message(chat_id=update.effective_chat.id, text=classes_description, reply_markup=markup)
        return CLASS_CHOOSING
    else:
        where_keyboard = [["–î–æ–º –ø–æ—Ä—É—á–µ–Ω–∏–π", "–•—Ä–∞–º –•—Ä–æ–Ω–æ—Å–∞", "–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è", "–î–æ–º –≥–∏–ª—å–¥–∏–π"],
                          ['–ö—É–∑–Ω–∏—Ü–∞', '–†—ã–Ω–æ–∫', '–ê—Ä–µ–Ω–∞', '–í–µ–ª–∏–∫–∞—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∞'], ["–û—Ç–º–µ–Ω–∞"]]
        markup = ReplyKeyboardMarkup(where_keyboard, one_time_keyboard=True)
        message = '–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º! –ö—É–¥–∞ –æ—Ç–ø—Ä–∞–≤–∏–º—Å—è?'
        await context.bot.send_message(chat_id=update.effective_chat.id, text=message, reply_markup=markup)
        return WHERE_CHOOSING


async def class_choosing(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    user_id = update.message.from_user.id
    context.user_data["choice"] = text
    inserter('game_class', text, user_id)
    message = f'–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–∏–ª–∏ –ª–∏—Ü–µ–Ω–∑–∏—é –Ω–∞ —Ä–æ–ª—å "{text}".\n\n' \
              "–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –≤–∞–º –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã –≤—Å–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ —Å–ª—É–∂–∏—Ç–µ–ª—è –∏–º–ø–µ—Ä–∏–∏, " \
              "–æ–¥–Ω–∞–∫–æ –Ω–µ —Ä–∞—Å—Å—Ç—Ä–∞–∏–≤–∞–π—Ç–µ—Å—å, –≤–∞–º –±—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã –Ω–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø–æ –º–µ—Ä–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª–µ–¥—É—é—â–∏—Ö —Ä–∞–Ω–≥–æ–≤. " \
              "–í–∞–º –ø—Ä–µ–¥—Å—Ç–æ–∏—Ç –ø—Ä–æ–π—Ç–∏ –º–Ω–æ–≥–æ –∏—Å–ø—ã—Ç–∞–Ω–∏–π –∏ –±–∏—Ç–≤, –Ω–æ –º—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ –≤—ã —Å–º–æ–∂–µ—Ç–µ –ø—Ä–µ–æ–¥–æ–ª–µ—Ç—å –≤—Å–µ —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏" \
              " –∏ —Å—Ç–∞—Ç—å –æ–¥–Ω–∏–º –∏–∑ –ª—É—á—à–∏—Ö –≤ –Ω–∞—à–µ–π –∏–º–ø–µ—Ä–∏–∏. –ñ–µ–ª–∞–µ–º –í–∞–º —É–¥–∞—á–∏!"
    await context.bot.send_message(chat_id=update.effective_chat.id, text=message, reply_markup=ReplyKeyboardRemove())
    where_keyboard = [["–î–æ–º –ø–æ—Ä—É—á–µ–Ω–∏–π", "–•—Ä–∞–º –•—Ä–æ–Ω–æ—Å–∞", "–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è", "–î–æ–º –≥–∏–ª—å–¥–∏–π"],
                      ['–ö—É–∑–Ω–∏—Ü–∞', '–†—ã–Ω–æ–∫', '–ê—Ä–µ–Ω–∞', '–í–µ–ª–∏–∫–∞—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∞'], ["–û—Ç–º–µ–Ω–∞"]]
    markup = ReplyKeyboardMarkup(where_keyboard, one_time_keyboard=True)
    message = '–ö—É–¥–∞ –æ—Ç–ø—Ä–∞–≤–∏–º—Å—è?'
    await context.bot.send_message(chat_id=update.effective_chat.id, text=message, reply_markup=markup)
    return WHERE_CHOOSING


async def assignments(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message = '–í—ã –ø–æ–¥—Ö–æ–¥–∏—Ç–µ –∫ –Ω–µ–±–æ–ª—å—à–æ–º—É –∑–¥–∞–Ω–∏—é —Å –≤—ã–≤–µ—Å–∫–æ–π "–î–æ–º –ø–æ—Ä—É—á–µ–Ω–∏–π". ' \
              '–ü—Ä–∏ –≤—Ö–æ–¥–µ –í—ã –∑–∞–º–µ—á–∞–µ—Ç–µ, —á—Ç–æ –Ω–∞ —Å—Ç–µ–Ω–∞—Ö –≤–∏—Å—è—Ç –¥–æ—Å–∫–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–π —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –∑–∞–¥–∞–Ω–∏—è–º–∏.\n' \
              '–ú–æ–∂–µ—Ç –∏ –ø–æ–ª—É—á–∏—Ç—Å—è –Ω–∞–π—Ç–∏, —á—Ç–æ-—Ç–æ, —á—Ç–æ –í–∞–º –ø–æ –¥—É—à–µ...\n\n' \
              '–í –æ–¥–∏–Ω–æ—á–∫—É –∏–ª–∏ —Å –¥—Ä—É–∑—å—è–º–∏?'
    count_keyboard = [["–í –æ–¥–∏–Ω–æ—á–∫—É", "–° –¥—Ä—É–∑—å—è–º–∏"], ["–ù–∞–∑–∞–¥"]]
    markup = ReplyKeyboardMarkup(count_keyboard, one_time_keyboard=True)
    await context.bot.send_message(chat_id=update.effective_chat.id, text=message,
                                   reply_markup=markup)  # –ó–¥–µ—Å—å –±—É–¥—É—Ç –∑–∞–¥–∞–Ω–∏—è
    return TASKS


async def alone_tasks(update: Update, context: ContextTypes.DEFAULT_TYPE):
    pass  # –°—é–¥–∞ –¥–æ–±–∞–≤–∏–º –æ–¥–∏–Ω–æ—á–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è


async def multiplayer_tasks(update: Update, context: ContextTypes.DEFAULT_TYPE):
    pass  # –°—é–¥–∞ –¥–æ–±–∞–≤–∏–º –º—É–ª—å—Ç–∏–ø–ª–µ–µ—Ä –∑–∞–¥–∞–Ω–∏—è


def get_last_events():
    con = create_connection('../db/database.db')
    query = f"""
                    SELECT * FROM global_events
                    """
    res = execute_read_query(con, query)
    ans = "\n".join([" ".join(map(str, row)) for row in res])
    con.close()
    return ans


async def get_events(update: Update, context: ContextTypes.DEFAULT_TYPE):
    events = get_last_events()
    await context.bot.send_message(chat_id=update.effective_chat.id, text=events)


async def chronos(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_available(update.message.from_user.id, 500):
        message = '–í—ã –ø–æ–¥—Ö–æ–¥–∏—Ç–µ –∫ –æ–≥—Ä–æ–º–Ω–æ–º—É —Ö—Ä–∞–º—É, –Ω–æ –∫–∞–∫–∞—è-—Ç–æ –Ω–µ–≤–µ–¥–æ–º–∞—è —Å–∏–ª–∞ –Ω–µ –¥–∞—ë—Ç –í–∞–º –ø—Ä–æ–π—Ç–∏ –≤–Ω—É—Ç—Ä—å.\n–í–æ–∑–º–æ–∂–Ω–æ, ' \
                  '–í–∞–º –ø–æ–∫–∞ —á—Ç–æ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –æ–ø—ã—Ç–∞.'
        await context.bot.send_message(chat_id=update.effective_chat.id, text=message)
    else:
        message = '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –•—Ä–∞–º –•—Ä–æ–Ω–æ—Å–∞. –ó–¥–µ—Å—å –≤—ã —Å–º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—ã–µ –Ω–∞–≤—ã–∫–∏ –¥–ª—è —Å–≤–æ–µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞, ' \
                  '–∞ —Ç–∞–∫–∂–µ, –ø–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–≥–æ —Ä–∞–Ω–≥–∞, –∏–∑–º–µ–Ω–∏—Ç—å –ø–æ–¥–∫–ª–∞—Å—Å.'
        if not is_available(update.message.from_user.id, 1000):  # –ï—Å–ª–∏ –æ–ø—ã—Ç –±–æ–ª—å—à–µ 1000, –¥–∞—ë–º –¥–æ—Å—Ç—É–ø –∫ —Å–º–µ–Ω–µ –ø–æ–¥–∫–ª–∞—Å—Å–∞
            chronos_keyboard = [["–£–ª—É—á—à–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞"], ["–ù–∞–∑–∞–¥"]]
        else:
            chronos_keyboard = [["–£–ª—É—á—à–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞", "–ò–∑–º–µ–Ω–∏—Ç—å –ø–æ–¥–∫–ª–∞—Å—Å"], ["–ù–∞–∑–∞–¥"]]
        markup = ReplyKeyboardMarkup(chronos_keyboard, one_time_keyboard=True)
        await context.bot.send_message(chat_id=update.effective_chat.id, text=message, reply_markup=markup)
        return CHRONOS_CHOOSING


async def upgrade_champ(update: Update, context: ContextTypes.DEFAULT_TYPE):
    pass  # –ó–¥–µ—Å—å –±—É–¥–µ—Ç —É–ª—É—á—à–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞


async def change_subclass(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if is_available(update.message.from_user.id, 1000):
        con = create_connection('../db/database.db')
        user_id = update.message.from_user.id
        request = f"SELECT game_class FROM users WHERE id={user_id}"
        class_data = execute_read_query(con, request)
        con.close()
        if class_data[0][0] == '–†—ã—Ü–∞—Ä—å':
            subclass_keyboard = [["–õ–∞—Ç–Ω–∏–∫", "–ü–∞–ª–∞–¥–∏–Ω"], ["–ù–∞–∑–∞–¥"]]
            message = "–û–ø–∏—Å–∞–Ω–∏–µ –ø–æ–¥–∫–ª–∞—Å—Å–æ–≤:\n\n" \
                      "‚öúÔ∏è –õ–∞—Ç–Ω–∏–∫ - —É–ø–æ—Ä –≤ –∑–∞—â–∏—Ç—É, –Ω–æ—Å–∏—Ç –º–∞—Å—Å–∏–≤–Ω—ã–π —â–∏—Ç –∏ –º–µ—á\n" \
                      "‚öîÔ∏è –ü–∞–ª–∞–¥–∏–Ω - —É–ø–æ—Ä –≤ –∞—Ç–∞–∫—É, –Ω–æ—Å–∏—Ç —Ç—è–∂–µ–ª—ã–µ –¥–æ—Å–ø–µ—Ö–∏ –∏ –º–æ–ª–æ—Ç"

        elif class_data[0][0] == '–ú–∞–≥':
            subclass_keyboard = [["–ß–µ—Ä–Ω–æ–∫–Ω–∏–∂–Ω–∏–∫", "–≠–ª–µ–º–µ–Ω—Ç–∞–ª—å", "–ê–Ω–≥–µ–ª"], ["–ù–∞–∑–∞–¥"]]
            message = "–û–ø–∏—Å–∞–Ω–∏–µ –ø–æ–¥–∫–ª–∞—Å—Å–æ–≤:\n\n" \
                      "üìì –ß–µ—Ä–Ω–æ–∫–Ω–∏–∂–Ω–∏–∫ - —É–ø–æ—Ä –≤ –∞—Ç–∞–∫—É, –Ω–æ—Å–∏—Ç –∫–Ω–∏–≥—É\n" \
                      "üî• –≠–ª–µ–º–µ–Ω—Ç–∞–ª—å - —É–ø–æ—Ä –≤ –∫–æ–Ω—Ç—Ä–æ–ª—å, –Ω–æ—Å–∏—Ç –ø–æ—Å–æ—Ö\n" \
                      "üí´ –ê–Ω–≥–µ–ª - —É–ø–æ—Ä –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É, –Ω–æ—Å–∏—Ç –ø–µ—Ä—á–∞—Ç–∫–∏"
        elif class_data[0][0] == '–õ—É—á–Ω–∏–∫':
            subclass_keyboard = [["–ê—Ä–±–∞–ª–µ—Ç—á–∏–∫", "–®–∞–º–∞–Ω", "–ò–Ω–∂–µ–Ω–µ—Ä"], ["–ù–∞–∑–∞–¥"]]
            message = "–û–ø–∏—Å–∞–Ω–∏–µ –ø–æ–¥–∫–ª–∞—Å—Å–æ–≤:\n\n" \
                      "‚Ü£ –ê—Ä–±–∞–ª–µ—Ç—á–∏–∫ - —É–ø–æ—Ä –≤ –∞—Ç–∞–∫—É, –Ω–æ—Å–∏—Ç –∞–≤—Ç–æ–º–∞—Ç, –Ω–∞–µ–±–∞–ª, –∞—Ä–±–∞–ª–µ—Ç\n" \
                      "üèπ –®–∞–º–∞–Ω - —É–ø–æ—Ä –≤ –∫–æ–Ω—Ç—Ä–æ–ª—å, –Ω–æ—Å–∏—Ç –ª—É–∫ –∏ –∫–æ–ª—á–∞–Ω\n" \
                      "üí• –ò–Ω–∂–µ–Ω–µ—Ä - —É–ø–æ—Ä –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É, –Ω–æ—Å–∏—Ç"  # –°—é–¥–∞ –¥–æ–±–∞–≤–∏—Ç—å —á—Ç–æ –Ω–æ—Å–∏—Ç
        elif class_data[0][0] == '–û—Ö–æ—Ç–Ω–∏–∫':
            subclass_keyboard = [["–£–±–∏–π—Ü–∞", "–®–∏–Ω–æ–±–∏"], ["–ù–∞–∑–∞–¥"]]
            message = "–û–ø–∏—Å–∞–Ω–∏–µ –ø–æ–¥–∫–ª–∞—Å—Å–æ–≤:\n\n" \
                      "‚öî –£–±–∏–π—Ü–∞ - —É–ø–æ—Ä –≤ –∞—Ç–∞–∫—É, –Ω–æ—Å–∏—Ç –∫–∏–Ω–∂–∞–ª—ã\n" \
                      "üó° –®–∏–Ω–æ–±–∏ - —É–ø–æ—Ä –≤ –∞—Ç–∞–∫—É –∏ –∫–æ–Ω—Ç—Ä–æ–ª—å, –Ω–æ—Å–∏—Ç –∫–ª–∏–Ω–æ–∫"
        else:
            return logging.error(f"SUBCLASSES DO NOT EXIT FOR CLASS {class_data[0][0]}")
        markup = ReplyKeyboardMarkup(subclass_keyboard, one_time_keyboard=True)
        await context.bot.send_message(chat_id=update.effective_chat.id, text=message, reply_markup=markup)
        return SUBCLASS_CHOOSING
    else:
        message = '–£ –≤–∞—Å –ø–æ–∫–∞ —á—Ç–æ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–º–µ–Ω–µ –ø–æ–¥–∫–ª–∞—Å—Å–∞!'
        await context.bot.send_message(chat_id=update.effective_chat.id, text=message)


async def subclass_choosing(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    user_id = update.message.from_user.id
    context.user_data["choice"] = text
    inserter('game_subclass', text, user_id)
    message = f'–í—ã —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–∏–ª–∏ –ø–æ–¥–∫–ª–∞—Å—Å –Ω–∞ "{text}!"'
    await context.bot.send_message(chat_id=update.effective_chat.id, text=message)


async def lab(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_available(update.message.from_user.id, 500):
        message = '–í—ã –ø—Ä–∏—Ö–æ–¥–∏—Ç–µ –∫ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–∏, –Ω–æ –¥–≤–µ—Ä—å –æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –∑–∞–∫—Ä—ã—Ç–æ–π.\n–í–æ–∑–º–æ–∂–Ω–æ, –í–∞–º –ø–æ–∫–∞ —á—Ç–æ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –æ–ø—ã—Ç–∞.'
        await context.bot.send_message(chat_id=update.effective_chat.id, text=message)
    else:
        pass  # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –∫—Ä–∞—Ñ—Ç–∏—Ç—å —Ä–∞—Å—Ö–æ–¥–Ω–∏–∫–∏


async def guild_house(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_available(update.message.from_user.id, 1000):
        message = '–í—ã –ø—Ä–∏—Ö–æ–¥–∏—Ç–µ –∫ –¥–æ–º—É –≥–∏–ª—å–¥–∏–π. –ü–æ –∫—Ä–∞–π–Ω–µ–π –º–µ—Ä–µ —Ç–∞–∫ —Å–∫–∞–∑–∞–ª —Å—Ç—Ä–∞–∂–Ω–∏–∫...\n–û–Ω –Ω–µ –ø—Ä–æ–ø—É—Å–∫–∞–µ—Ç –í–∞—Å –ø–æ–¥ ' \
                  '–ø—Ä–µ–¥–ª–æ–≥–æ–º, —á—Ç–æ –í—ã –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –æ–ø—ã—Ç–Ω—ã.'
        await context.bot.send_message(chat_id=update.effective_chat.id, text=message)
    else:
        pass  # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –∑–∞–ø—Ä–∞—à–∏–≤–∞—Ç—å —Ä–µ—Å—É—Ä—Å—ã


async def game_cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message = " –î–æ –≤—Å—Ç—Ä–µ—á–∏! –ú—ã –±—É–¥–µ–º –∂–¥–∞—Ç—å –í–∞—Å –≤ –ò–º–ø–µ—Ä–∏–∏!"
    await context.bot.send_message(chat_id=update.effective_chat.id, text=message, reply_markup=ReplyKeyboardRemove())
    return ConversationHandler.END


if __name__ == '__main__':
    token_file = open("../tokens/tg_app_token.txt", "r")
    application = ApplicationBuilder().token(token_file.read()).build()
    token_file.close()
    class_handler = ConversationHandler(
        entry_points=[CommandHandler("game", game)],
        states={
            CLASS_CHOOSING: [
                MessageHandler(filters.Regex("^–†—ã—Ü–∞—Ä—å$|^–ú–∞–≥$|^–õ—É—á–Ω–∏–∫$|^–û—Ö–æ—Ç–Ω–∏–∫$"), class_choosing),
            ],
            WHERE_CHOOSING: [
                MessageHandler(filters.Regex("^–î–æ–º –ø–æ—Ä—É—á–µ–Ω–∏–π$"), assignments),
                MessageHandler(filters.Regex("^–•—Ä–∞–º –•—Ä–æ–Ω–æ—Å–∞$"), chronos),
                MessageHandler(filters.Regex("^–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è$"), lab),
                MessageHandler(filters.Regex("^–î–æ–º –≥–∏–ª—å–¥–∏–π$"), guild_house),
                #  –°—é–¥–∞ –¥–æ–±–∞–≤–∏–º –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ª–æ–∫–∞—Ü–∏–∏
            ],
            CHRONOS_CHOOSING: [
                MessageHandler(filters.Regex("^–£–ª—É—á—à–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞$"), upgrade_champ),
                MessageHandler(filters.Regex("^–ò–∑–º–µ–Ω–∏—Ç—å –ø–æ–¥–∫–ª–∞—Å—Å$"), change_subclass),
                MessageHandler(filters.Regex("^–ù–∞–∑–∞–¥$"), game),
            ],
            SUBCLASS_CHOOSING: [
                MessageHandler(filters.Regex(
                    "^–õ–∞—Ç–Ω–∏–∫$|^–ü–∞–ª–∞–¥–∏–Ω$|^–ß–µ—Ä–Ω–æ–∫–Ω–∏–∂–Ω–∏–∫$|^–≠–ª–µ–º–µ–Ω—Ç–∞–ª—å$|^–ê–Ω–≥–µ–ª$|^–ê—Ä–±–∞–ª–µ—Ç—á–∏–∫$|^–®–∞–º–∞–Ω$|^–ò–Ω–∂–µ–Ω–µ—Ä$|^–£–±–∏–π—Ü–∞$"
                    "|^–®–∏–Ω–æ–±–∏$"),
                    subclass_choosing),
                MessageHandler(filters.Regex("^–ù–∞–∑–∞–¥$"), chronos),
            ],
            TASKS: [
                MessageHandler(filters.Regex("^–í –æ–¥–∏–Ω–æ—á–∫—É$"), alone_tasks),
                MessageHandler(filters.Regex("^–° –¥—Ä—É–∑—å—è–º–∏$"), multiplayer_tasks),
                MessageHandler(filters.Regex("^–ù–∞–∑–∞–¥$"), game),
            ],
        },
        fallbacks=[MessageHandler(filters.Regex("^–û—Ç–º–µ–Ω–∞$"), game_cancel)],
    )
    application.add_handler(class_handler)
    application.add_handler(CommandHandler('start', start))
    application.add_handler(CommandHandler('events', get_events))
    application.add_handler(CommandHandler('help', help_me))
    # application.add_handler(CommandHandler('game', game))
    application.add_handler(custom_name_handler)
    application.add_handler(avatar_handler)
    application.add_handler(admin_handler)
    application.add_handler(CommandHandler('upgrade', upgrade))
    application.add_handler(MessageHandler(filters.Regex("^–î–∞$|^–¥–∞$"), danet))
    application.add_handler(MessageHandler(filters.Regex("^–ù–µ—Ç$|^–Ω–µ—Ç$"), netda))
    application.add_handler(CommandHandler('meme', meme))
    application.add_handler(CommandHandler('del', del_keyboard))
    application.add_handler(CommandHandler('menu', main_menu))
    application.add_handler(CommandHandler('fight', fight))
    application.add_handler(CommandHandler('profile', profile))
    application.run_polling()
